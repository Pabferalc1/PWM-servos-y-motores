
Practica4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051f8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005380  08005380  00015380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053c8  080053c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080053c8  080053c8  000153c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053d0  080053d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053d0  080053d0  000153d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053d4  080053d4  000153d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000000c  080053e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  080053e4  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc8a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e01  00000000  00000000  0002fcc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c0  00000000  00000000  00031ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fc8  00000000  00000000  00032b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025f97  00000000  00000000  00033b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bdbd  00000000  00000000  00059ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ee20b  00000000  00000000  000658a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00153aaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048b4  00000000  00000000  00153b2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005368 	.word	0x08005368

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005368 	.word	0x08005368

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b972 	b.w	8000cb0 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9e08      	ldr	r6, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	4688      	mov	r8, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14b      	bne.n	8000a8a <__udivmoddi4+0xa6>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4615      	mov	r5, r2
 80009f6:	d967      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b14a      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 80009fe:	f1c2 0720 	rsb	r7, r2, #32
 8000a02:	fa01 f302 	lsl.w	r3, r1, r2
 8000a06:	fa20 f707 	lsr.w	r7, r0, r7
 8000a0a:	4095      	lsls	r5, r2
 8000a0c:	ea47 0803 	orr.w	r8, r7, r3
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a1c:	fa1f fc85 	uxth.w	ip, r5
 8000a20:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a24:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a28:	fb07 f10c 	mul.w	r1, r7, ip
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18eb      	adds	r3, r5, r3
 8000a32:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a36:	f080 811b 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8118 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a40:	3f02      	subs	r7, #2
 8000a42:	442b      	add	r3, r5
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a58:	45a4      	cmp	ip, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	192c      	adds	r4, r5, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8107 	bcs.w	8000c74 <__udivmoddi4+0x290>
 8000a66:	45a4      	cmp	ip, r4
 8000a68:	f240 8104 	bls.w	8000c74 <__udivmoddi4+0x290>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	442c      	add	r4, r5
 8000a70:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a74:	eba4 040c 	sub.w	r4, r4, ip
 8000a78:	2700      	movs	r7, #0
 8000a7a:	b11e      	cbz	r6, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c6 4300 	strd	r4, r3, [r6]
 8000a84:	4639      	mov	r1, r7
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d909      	bls.n	8000aa2 <__udivmoddi4+0xbe>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	f000 80eb 	beq.w	8000c6a <__udivmoddi4+0x286>
 8000a94:	2700      	movs	r7, #0
 8000a96:	e9c6 0100 	strd	r0, r1, [r6]
 8000a9a:	4638      	mov	r0, r7
 8000a9c:	4639      	mov	r1, r7
 8000a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa2:	fab3 f783 	clz	r7, r3
 8000aa6:	2f00      	cmp	r7, #0
 8000aa8:	d147      	bne.n	8000b3a <__udivmoddi4+0x156>
 8000aaa:	428b      	cmp	r3, r1
 8000aac:	d302      	bcc.n	8000ab4 <__udivmoddi4+0xd0>
 8000aae:	4282      	cmp	r2, r0
 8000ab0:	f200 80fa 	bhi.w	8000ca8 <__udivmoddi4+0x2c4>
 8000ab4:	1a84      	subs	r4, r0, r2
 8000ab6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aba:	2001      	movs	r0, #1
 8000abc:	4698      	mov	r8, r3
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d0e0      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000ac2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ac6:	e7dd      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000ac8:	b902      	cbnz	r2, 8000acc <__udivmoddi4+0xe8>
 8000aca:	deff      	udf	#255	; 0xff
 8000acc:	fab2 f282 	clz	r2, r2
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	f040 808f 	bne.w	8000bf4 <__udivmoddi4+0x210>
 8000ad6:	1b49      	subs	r1, r1, r5
 8000ad8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000adc:	fa1f f885 	uxth.w	r8, r5
 8000ae0:	2701      	movs	r7, #1
 8000ae2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ae6:	0c23      	lsrs	r3, r4, #16
 8000ae8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb08 f10c 	mul.w	r1, r8, ip
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0x124>
 8000af8:	18eb      	adds	r3, r5, r3
 8000afa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x122>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	f200 80cd 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b06:	4684      	mov	ip, r0
 8000b08:	1a59      	subs	r1, r3, r1
 8000b0a:	b2a3      	uxth	r3, r4
 8000b0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b10:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b14:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b18:	fb08 f800 	mul.w	r8, r8, r0
 8000b1c:	45a0      	cmp	r8, r4
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x14c>
 8000b20:	192c      	adds	r4, r5, r4
 8000b22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x14a>
 8000b28:	45a0      	cmp	r8, r4
 8000b2a:	f200 80b6 	bhi.w	8000c9a <__udivmoddi4+0x2b6>
 8000b2e:	4618      	mov	r0, r3
 8000b30:	eba4 0408 	sub.w	r4, r4, r8
 8000b34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b38:	e79f      	b.n	8000a7a <__udivmoddi4+0x96>
 8000b3a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b3e:	40bb      	lsls	r3, r7
 8000b40:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b44:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b48:	fa01 f407 	lsl.w	r4, r1, r7
 8000b4c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b50:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b54:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b58:	4325      	orrs	r5, r4
 8000b5a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b5e:	0c2c      	lsrs	r4, r5, #16
 8000b60:	fb08 3319 	mls	r3, r8, r9, r3
 8000b64:	fa1f fa8e 	uxth.w	sl, lr
 8000b68:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b6c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b70:	429c      	cmp	r4, r3
 8000b72:	fa02 f207 	lsl.w	r2, r2, r7
 8000b76:	fa00 f107 	lsl.w	r1, r0, r7
 8000b7a:	d90b      	bls.n	8000b94 <__udivmoddi4+0x1b0>
 8000b7c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b84:	f080 8087 	bcs.w	8000c96 <__udivmoddi4+0x2b2>
 8000b88:	429c      	cmp	r4, r3
 8000b8a:	f240 8084 	bls.w	8000c96 <__udivmoddi4+0x2b2>
 8000b8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b92:	4473      	add	r3, lr
 8000b94:	1b1b      	subs	r3, r3, r4
 8000b96:	b2ad      	uxth	r5, r5
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ba4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ba8:	45a2      	cmp	sl, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1da>
 8000bac:	eb1e 0404 	adds.w	r4, lr, r4
 8000bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb4:	d26b      	bcs.n	8000c8e <__udivmoddi4+0x2aa>
 8000bb6:	45a2      	cmp	sl, r4
 8000bb8:	d969      	bls.n	8000c8e <__udivmoddi4+0x2aa>
 8000bba:	3802      	subs	r0, #2
 8000bbc:	4474      	add	r4, lr
 8000bbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bc6:	eba4 040a 	sub.w	r4, r4, sl
 8000bca:	454c      	cmp	r4, r9
 8000bcc:	46c2      	mov	sl, r8
 8000bce:	464b      	mov	r3, r9
 8000bd0:	d354      	bcc.n	8000c7c <__udivmoddi4+0x298>
 8000bd2:	d051      	beq.n	8000c78 <__udivmoddi4+0x294>
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d069      	beq.n	8000cac <__udivmoddi4+0x2c8>
 8000bd8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bdc:	eb64 0403 	sbc.w	r4, r4, r3
 8000be0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000be4:	40fd      	lsrs	r5, r7
 8000be6:	40fc      	lsrs	r4, r7
 8000be8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bec:	e9c6 5400 	strd	r5, r4, [r6]
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	e747      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000bf4:	f1c2 0320 	rsb	r3, r2, #32
 8000bf8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bfc:	4095      	lsls	r5, r2
 8000bfe:	fa01 f002 	lsl.w	r0, r1, r2
 8000c02:	fa21 f303 	lsr.w	r3, r1, r3
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	4338      	orrs	r0, r7
 8000c0c:	0c01      	lsrs	r1, r0, #16
 8000c0e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c12:	fa1f f885 	uxth.w	r8, r5
 8000c16:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c1e:	fb07 f308 	mul.w	r3, r7, r8
 8000c22:	428b      	cmp	r3, r1
 8000c24:	fa04 f402 	lsl.w	r4, r4, r2
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x256>
 8000c2a:	1869      	adds	r1, r5, r1
 8000c2c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c30:	d22f      	bcs.n	8000c92 <__udivmoddi4+0x2ae>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d92d      	bls.n	8000c92 <__udivmoddi4+0x2ae>
 8000c36:	3f02      	subs	r7, #2
 8000c38:	4429      	add	r1, r5
 8000c3a:	1acb      	subs	r3, r1, r3
 8000c3c:	b281      	uxth	r1, r0
 8000c3e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c42:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4a:	fb00 f308 	mul.w	r3, r0, r8
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d907      	bls.n	8000c62 <__udivmoddi4+0x27e>
 8000c52:	1869      	adds	r1, r5, r1
 8000c54:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c58:	d217      	bcs.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d915      	bls.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5e:	3802      	subs	r0, #2
 8000c60:	4429      	add	r1, r5
 8000c62:	1ac9      	subs	r1, r1, r3
 8000c64:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c68:	e73b      	b.n	8000ae2 <__udivmoddi4+0xfe>
 8000c6a:	4637      	mov	r7, r6
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	e709      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c70:	4607      	mov	r7, r0
 8000c72:	e6e7      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c74:	4618      	mov	r0, r3
 8000c76:	e6fb      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c78:	4541      	cmp	r1, r8
 8000c7a:	d2ab      	bcs.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c7c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c80:	eb69 020e 	sbc.w	r2, r9, lr
 8000c84:	3801      	subs	r0, #1
 8000c86:	4613      	mov	r3, r2
 8000c88:	e7a4      	b.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c8a:	4660      	mov	r0, ip
 8000c8c:	e7e9      	b.n	8000c62 <__udivmoddi4+0x27e>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	e795      	b.n	8000bbe <__udivmoddi4+0x1da>
 8000c92:	4667      	mov	r7, ip
 8000c94:	e7d1      	b.n	8000c3a <__udivmoddi4+0x256>
 8000c96:	4681      	mov	r9, r0
 8000c98:	e77c      	b.n	8000b94 <__udivmoddi4+0x1b0>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	442c      	add	r4, r5
 8000c9e:	e747      	b.n	8000b30 <__udivmoddi4+0x14c>
 8000ca0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ca4:	442b      	add	r3, r5
 8000ca6:	e72f      	b.n	8000b08 <__udivmoddi4+0x124>
 8000ca8:	4638      	mov	r0, r7
 8000caa:	e708      	b.n	8000abe <__udivmoddi4+0xda>
 8000cac:	4637      	mov	r7, r6
 8000cae:	e6e9      	b.n	8000a84 <__udivmoddi4+0xa0>

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <setMotorSpeed>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setMotorSpeed (float speed){
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	ed87 0a01 	vstr	s0, [r7, #4]
	if(speed >= 0){
 8000cbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cca:	db0d      	blt.n	8000ce8 <setMotorSpeed+0x34>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed);
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <setMotorSpeed+0x60>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cd8:	ee17 2a90 	vmov	r2, s15
 8000cdc:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <setMotorSpeed+0x60>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	63da      	str	r2, [r3, #60]	; 0x3c
	}else{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, -speed);
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
	}
}
 8000ce6:	e00e      	b.n	8000d06 <setMotorSpeed+0x52>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, -speed);
 8000ce8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cec:	eef1 7a67 	vneg.f32	s15, s15
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <setMotorSpeed+0x60>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cf8:	ee17 2a90 	vmov	r2, s15
 8000cfc:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000cfe:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <setMotorSpeed+0x60>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2200      	movs	r2, #0
 8000d04:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000134 	.word	0x20000134

08000d18 <initAccelerometer>:

void initAccelerometer(void){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af04      	add	r7, sp, #16
	uint8_t buffer[1];
	buffer[0] = 0x40;
 8000d1e:	2340      	movs	r3, #64	; 0x40
 8000d20:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c2, 0xD4, 0x10, I2C_MEMADD_SIZE_8BIT, buffer, 1, 1000);
 8000d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d26:	9302      	str	r3, [sp, #8]
 8000d28:	2301      	movs	r3, #1
 8000d2a:	9301      	str	r3, [sp, #4]
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	2301      	movs	r3, #1
 8000d32:	2210      	movs	r2, #16
 8000d34:	21d4      	movs	r1, #212	; 0xd4
 8000d36:	4803      	ldr	r0, [pc, #12]	; (8000d44 <initAccelerometer+0x2c>)
 8000d38:	f001 f82e 	bl	8001d98 <HAL_I2C_Mem_Write>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000028 	.word	0x20000028

08000d48 <readAccel>:

int16_t readAccel(uint8_t axxis){
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af04      	add	r7, sp, #16
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
	int16_t accel;
	uint8_t buffer[2];
	if(axxis == 0){
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d10e      	bne.n	8000d76 <readAccel+0x2e>
		HAL_I2C_Mem_Read(&hi2c2, 0xd4, 0x28, I2C_MEMADD_SIZE_8BIT, buffer, 2, 1000);
 8000d58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5c:	9302      	str	r3, [sp, #8]
 8000d5e:	2302      	movs	r3, #2
 8000d60:	9301      	str	r3, [sp, #4]
 8000d62:	f107 030c 	add.w	r3, r7, #12
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	2301      	movs	r3, #1
 8000d6a:	2228      	movs	r2, #40	; 0x28
 8000d6c:	21d4      	movs	r1, #212	; 0xd4
 8000d6e:	4824      	ldr	r0, [pc, #144]	; (8000e00 <readAccel+0xb8>)
 8000d70:	f001 f926 	bl	8001fc0 <HAL_I2C_Mem_Read>
 8000d74:	e022      	b.n	8000dbc <readAccel+0x74>


	}else if( axxis == 1){
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d10e      	bne.n	8000d9a <readAccel+0x52>
		HAL_I2C_Mem_Read(&hi2c2, 0xd4, 0x2a, I2C_MEMADD_SIZE_8BIT, buffer, 2, 1000);
 8000d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d80:	9302      	str	r3, [sp, #8]
 8000d82:	2302      	movs	r3, #2
 8000d84:	9301      	str	r3, [sp, #4]
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	222a      	movs	r2, #42	; 0x2a
 8000d90:	21d4      	movs	r1, #212	; 0xd4
 8000d92:	481b      	ldr	r0, [pc, #108]	; (8000e00 <readAccel+0xb8>)
 8000d94:	f001 f914 	bl	8001fc0 <HAL_I2C_Mem_Read>
 8000d98:	e010      	b.n	8000dbc <readAccel+0x74>


	}else if (axxis == 2){
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d10d      	bne.n	8000dbc <readAccel+0x74>
		HAL_I2C_Mem_Read(&hi2c2, 0xd4, 0x2c, I2C_MEMADD_SIZE_8BIT, buffer, 2, 1000);
 8000da0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da4:	9302      	str	r3, [sp, #8]
 8000da6:	2302      	movs	r3, #2
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2301      	movs	r3, #1
 8000db2:	222c      	movs	r2, #44	; 0x2c
 8000db4:	21d4      	movs	r1, #212	; 0xd4
 8000db6:	4812      	ldr	r0, [pc, #72]	; (8000e00 <readAccel+0xb8>)
 8000db8:	f001 f902 	bl	8001fc0 <HAL_I2C_Mem_Read>


	}
	accel = ((int16_t)(buffer[1]<<8) | buffer[0]) * 0.061;
 8000dbc:	7b7b      	ldrb	r3, [r7, #13]
 8000dbe:	021b      	lsls	r3, r3, #8
 8000dc0:	b21b      	sxth	r3, r3
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	7b3b      	ldrb	r3, [r7, #12]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fb4f 	bl	800046c <__aeabi_i2d>
 8000dce:	a30a      	add	r3, pc, #40	; (adr r3, 8000df8 <readAccel+0xb0>)
 8000dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd4:	f7ff fbb4 	bl	8000540 <__aeabi_dmul>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	460c      	mov	r4, r1
 8000ddc:	4618      	mov	r0, r3
 8000dde:	4621      	mov	r1, r4
 8000de0:	f7ff fdc0 	bl	8000964 <__aeabi_d2iz>
 8000de4:	4603      	mov	r3, r0
 8000de6:	81fb      	strh	r3, [r7, #14]
}
 8000de8:	bf00      	nop
 8000dea:	4618      	mov	r0, r3
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd90      	pop	{r4, r7, pc}
 8000df2:	bf00      	nop
 8000df4:	f3af 8000 	nop.w
 8000df8:	5a1cac08 	.word	0x5a1cac08
 8000dfc:	3faf3b64 	.word	0x3faf3b64
 8000e00:	20000028 	.word	0x20000028

08000e04 <setServoPos>:


void setServoPos(float ang){
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	ed87 0a01 	vstr	s0, [r7, #4]
	float th = ((ang * 200) / 18);
 8000e0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e12:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000e44 <setServoPos+0x40>
 8000e16:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e1a:	eef3 6a02 	vmov.f32	s13, #50	; 0x41900000  18.0
 8000e1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e22:	edc7 7a03 	vstr	s15, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, th);
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <setServoPos+0x44>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e32:	ee17 2a90 	vmov	r2, s15
 8000e36:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	43480000 	.word	0x43480000
 8000e48:	20000074 	.word	0x20000074

08000e4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e52:	f000 fbf0 	bl	8001636 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e56:	f000 f853 	bl	8000f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e5a:	f000 f9f9 	bl	8001250 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000e5e:	f000 f8c9 	bl	8000ff4 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000e62:	f000 f907 	bl	8001074 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e66:	f000 f969 	bl	800113c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000e6a:	f000 f9c1 	bl	80011f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4820      	ldr	r0, [pc, #128]	; (8000ef4 <main+0xa8>)
 8000e72:	f002 ff9d 	bl	8003db0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000e76:	2108      	movs	r1, #8
 8000e78:	481e      	ldr	r0, [pc, #120]	; (8000ef4 <main+0xa8>)
 8000e7a:	f002 ff99 	bl	8003db0 <HAL_TIM_PWM_Start>
  initAccelerometer();
 8000e7e:	f7ff ff4b 	bl	8000d18 <initAccelerometer>
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000e82:	210c      	movs	r1, #12
 8000e84:	481c      	ldr	r0, [pc, #112]	; (8000ef8 <main+0xac>)
 8000e86:	f002 ff93 	bl	8003db0 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int16_t ejeY;
	  ejeY = readAccel(1);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f7ff ff5c 	bl	8000d48 <readAccel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	80fb      	strh	r3, [r7, #6]
	  ejeY = ejeY * 4;
 8000e94:	88fb      	ldrh	r3, [r7, #6]
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	80fb      	strh	r3, [r7, #6]
	  setMotorSpeed(ejeY);
 8000e9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ea0:	ee07 3a90 	vmov	s15, r3
 8000ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8000eac:	f7ff ff02 	bl	8000cb4 <setMotorSpeed>

	  int16_t ejeX;
	  ejeX = readAccel(1);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f7ff ff49 	bl	8000d48 <readAccel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	80bb      	strh	r3, [r7, #4]
	  int16_t escalado = (((ejeX - (-1000)) * (180-0)) / (1000 - (-1000))) + 0;
 8000eba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ebe:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000ec2:	22b4      	movs	r2, #180	; 0xb4
 8000ec4:	fb02 f303 	mul.w	r3, r2, r3
 8000ec8:	4a0c      	ldr	r2, [pc, #48]	; (8000efc <main+0xb0>)
 8000eca:	fb82 1203 	smull	r1, r2, r2, r3
 8000ece:	11d2      	asrs	r2, r2, #7
 8000ed0:	17db      	asrs	r3, r3, #31
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	807b      	strh	r3, [r7, #2]
	  setServoPos(escalado);
 8000ed6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000eda:	ee07 3a90 	vmov	s15, r3
 8000ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ee6:	f7ff ff8d 	bl	8000e04 <setServoPos>
	  HAL_Delay(100);
 8000eea:	2064      	movs	r0, #100	; 0x64
 8000eec:	f000 fc14 	bl	8001718 <HAL_Delay>
  {
 8000ef0:	e7cb      	b.n	8000e8a <main+0x3e>
 8000ef2:	bf00      	nop
 8000ef4:	20000134 	.word	0x20000134
 8000ef8:	20000074 	.word	0x20000074
 8000efc:	10624dd3 	.word	0x10624dd3

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0b8      	sub	sp, #224	; 0xe0
 8000f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f0a:	2244      	movs	r2, #68	; 0x44
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f004 fa22 	bl	8005358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f14:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f24:	463b      	mov	r3, r7
 8000f26:	2288      	movs	r2, #136	; 0x88
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f004 fa14 	bl	8005358 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f30:	2310      	movs	r3, #16
 8000f32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f36:	2301      	movs	r3, #1
 8000f38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f42:	2360      	movs	r3, #96	; 0x60
 8000f44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000f5a:	2328      	movs	r3, #40	; 0x28
 8000f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f60:	2307      	movs	r3, #7
 8000f62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f66:	2302      	movs	r3, #2
 8000f68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f76:	4618      	mov	r0, r3
 8000f78:	f001 fc54 	bl	8002824 <HAL_RCC_OscConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000f82:	f000 f989 	bl	8001298 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f86:	230f      	movs	r3, #15
 8000f88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fa4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000fa8:	2104      	movs	r1, #4
 8000faa:	4618      	mov	r0, r3
 8000fac:	f002 f820 	bl	8002ff0 <HAL_RCC_ClockConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000fb6:	f000 f96f 	bl	8001298 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 8000fba:	2381      	movs	r3, #129	; 0x81
 8000fbc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f002 fa15 	bl	80033f8 <HAL_RCCEx_PeriphCLKConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000fd4:	f000 f960 	bl	8001298 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fd8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fdc:	f001 fbcc 	bl	8002778 <HAL_PWREx_ControlVoltageScaling>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000fe6:	f000 f957 	bl	8001298 <Error_Handler>
  }
}
 8000fea:	bf00      	nop
 8000fec:	37e0      	adds	r7, #224	; 0xe0
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <MX_I2C2_Init+0x74>)
 8000ffa:	4a1c      	ldr	r2, [pc, #112]	; (800106c <MX_I2C2_Init+0x78>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <MX_I2C2_Init+0x74>)
 8001000:	4a1b      	ldr	r2, [pc, #108]	; (8001070 <MX_I2C2_Init+0x7c>)
 8001002:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_I2C2_Init+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <MX_I2C2_Init+0x74>)
 800100c:	2201      	movs	r2, #1
 800100e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <MX_I2C2_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_I2C2_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <MX_I2C2_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_I2C2_Init+0x74>)
 8001024:	2200      	movs	r2, #0
 8001026:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_I2C2_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800102e:	480e      	ldr	r0, [pc, #56]	; (8001068 <MX_I2C2_Init+0x74>)
 8001030:	f000 fe22 	bl	8001c78 <HAL_I2C_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800103a:	f000 f92d 	bl	8001298 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800103e:	2100      	movs	r1, #0
 8001040:	4809      	ldr	r0, [pc, #36]	; (8001068 <MX_I2C2_Init+0x74>)
 8001042:	f001 faf3 	bl	800262c <HAL_I2CEx_ConfigAnalogFilter>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800104c:	f000 f924 	bl	8001298 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001050:	2100      	movs	r1, #0
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_I2C2_Init+0x74>)
 8001054:	f001 fb35 	bl	80026c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800105e:	f000 f91b 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000028 	.word	0x20000028
 800106c:	40005800 	.word	0x40005800
 8001070:	10909cec 	.word	0x10909cec

08001074 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001086:	463b      	mov	r3, r7
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
 8001094:	615a      	str	r2, [r3, #20]
 8001096:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001098:	4b27      	ldr	r3, [pc, #156]	; (8001138 <MX_TIM2_Init+0xc4>)
 800109a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800109e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010a0:	4b25      	ldr	r3, [pc, #148]	; (8001138 <MX_TIM2_Init+0xc4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a6:	4b24      	ldr	r3, [pc, #144]	; (8001138 <MX_TIM2_Init+0xc4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <MX_TIM2_Init+0xc4>)
 80010ae:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80010b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b4:	4b20      	ldr	r3, [pc, #128]	; (8001138 <MX_TIM2_Init+0xc4>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ba:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <MX_TIM2_Init+0xc4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010c0:	481d      	ldr	r0, [pc, #116]	; (8001138 <MX_TIM2_Init+0xc4>)
 80010c2:	f002 fe49 	bl	8003d58 <HAL_TIM_PWM_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80010cc:	f000 f8e4 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4619      	mov	r1, r3
 80010de:	4816      	ldr	r0, [pc, #88]	; (8001138 <MX_TIM2_Init+0xc4>)
 80010e0:	f003 fb6c 	bl	80047bc <HAL_TIMEx_MasterConfigSynchronization>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80010ea:	f000 f8d5 	bl	8001298 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ee:	2360      	movs	r3, #96	; 0x60
 80010f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010fe:	463b      	mov	r3, r7
 8001100:	2200      	movs	r2, #0
 8001102:	4619      	mov	r1, r3
 8001104:	480c      	ldr	r0, [pc, #48]	; (8001138 <MX_TIM2_Init+0xc4>)
 8001106:	f002 feab 	bl	8003e60 <HAL_TIM_PWM_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001110:	f000 f8c2 	bl	8001298 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	2208      	movs	r2, #8
 8001118:	4619      	mov	r1, r3
 800111a:	4807      	ldr	r0, [pc, #28]	; (8001138 <MX_TIM2_Init+0xc4>)
 800111c:	f002 fea0 	bl	8003e60 <HAL_TIM_PWM_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001126:	f000 f8b7 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800112a:	4803      	ldr	r0, [pc, #12]	; (8001138 <MX_TIM2_Init+0xc4>)
 800112c:	f000 f956 	bl	80013dc <HAL_TIM_MspPostInit>

}
 8001130:	bf00      	nop
 8001132:	3728      	adds	r7, #40	; 0x28
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000134 	.word	0x20000134

0800113c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800114e:	463b      	mov	r3, r7
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
 800115c:	615a      	str	r2, [r3, #20]
 800115e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001160:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <MX_TIM3_Init+0xac>)
 8001162:	4a22      	ldr	r2, [pc, #136]	; (80011ec <MX_TIM3_Init+0xb0>)
 8001164:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001166:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <MX_TIM3_Init+0xac>)
 8001168:	224f      	movs	r2, #79	; 0x4f
 800116a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116c:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <MX_TIM3_Init+0xac>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8001172:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_TIM3_Init+0xac>)
 8001174:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001178:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117a:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <MX_TIM3_Init+0xac>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_TIM3_Init+0xac>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001186:	4818      	ldr	r0, [pc, #96]	; (80011e8 <MX_TIM3_Init+0xac>)
 8001188:	f002 fde6 	bl	8003d58 <HAL_TIM_PWM_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001192:	f000 f881 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119a:	2300      	movs	r3, #0
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	4619      	mov	r1, r3
 80011a4:	4810      	ldr	r0, [pc, #64]	; (80011e8 <MX_TIM3_Init+0xac>)
 80011a6:	f003 fb09 	bl	80047bc <HAL_TIMEx_MasterConfigSynchronization>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80011b0:	f000 f872 	bl	8001298 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b4:	2360      	movs	r3, #96	; 0x60
 80011b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011c4:	463b      	mov	r3, r7
 80011c6:	220c      	movs	r2, #12
 80011c8:	4619      	mov	r1, r3
 80011ca:	4807      	ldr	r0, [pc, #28]	; (80011e8 <MX_TIM3_Init+0xac>)
 80011cc:	f002 fe48 	bl	8003e60 <HAL_TIM_PWM_ConfigChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80011d6:	f000 f85f 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011da:	4803      	ldr	r0, [pc, #12]	; (80011e8 <MX_TIM3_Init+0xac>)
 80011dc:	f000 f8fe 	bl	80013dc <HAL_TIM_MspPostInit>

}
 80011e0:	bf00      	nop
 80011e2:	3728      	adds	r7, #40	; 0x28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000074 	.word	0x20000074
 80011ec:	40000400 	.word	0x40000400

080011f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_USART1_UART_Init+0x58>)
 80011f6:	4a15      	ldr	r2, [pc, #84]	; (800124c <MX_USART1_UART_Init+0x5c>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <MX_USART1_UART_Init+0x58>)
 80011fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001200:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_USART1_UART_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_USART1_UART_Init+0x58>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_USART1_UART_Init+0x58>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_USART1_UART_Init+0x58>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_USART1_UART_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_USART1_UART_Init+0x58>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <MX_USART1_UART_Init+0x58>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_USART1_UART_Init+0x58>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_USART1_UART_Init+0x58>)
 8001234:	f003 fb4a 	bl	80048cc <HAL_UART_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800123e:	f000 f82b 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200000b4 	.word	0x200000b4
 800124c:	40013800 	.word	0x40013800

08001250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_GPIO_Init+0x44>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <MX_GPIO_Init+0x44>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_GPIO_Init+0x44>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_GPIO_Init+0x44>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	4a08      	ldr	r2, [pc, #32]	; (8001294 <MX_GPIO_Init+0x44>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_GPIO_Init+0x44>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]

}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000

08001298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <HAL_MspInit+0x44>)
 80012b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b2:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <HAL_MspInit+0x44>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6613      	str	r3, [r2, #96]	; 0x60
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <HAL_MspInit+0x44>)
 80012bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <HAL_MspInit+0x44>)
 80012c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ca:	4a08      	ldr	r2, [pc, #32]	; (80012ec <HAL_MspInit+0x44>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d0:	6593      	str	r3, [r2, #88]	; 0x58
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_MspInit+0x44>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40021000 	.word	0x40021000

080012f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a17      	ldr	r2, [pc, #92]	; (800136c <HAL_I2C_MspInit+0x7c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d128      	bne.n	8001364 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <HAL_I2C_MspInit+0x80>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	4a16      	ldr	r2, [pc, #88]	; (8001370 <HAL_I2C_MspInit+0x80>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131e:	4b14      	ldr	r3, [pc, #80]	; (8001370 <HAL_I2C_MspInit+0x80>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800132a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800132e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001330:	2312      	movs	r3, #18
 8001332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001334:	2301      	movs	r3, #1
 8001336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800133c:	2304      	movs	r3, #4
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	480b      	ldr	r0, [pc, #44]	; (8001374 <HAL_I2C_MspInit+0x84>)
 8001348:	f000 faee 	bl	8001928 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <HAL_I2C_MspInit+0x80>)
 800134e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001350:	4a07      	ldr	r2, [pc, #28]	; (8001370 <HAL_I2C_MspInit+0x80>)
 8001352:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001356:	6593      	str	r3, [r2, #88]	; 0x58
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_I2C_MspInit+0x80>)
 800135a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001364:	bf00      	nop
 8001366:	3728      	adds	r7, #40	; 0x28
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40005800 	.word	0x40005800
 8001370:	40021000 	.word	0x40021000
 8001374:	48000400 	.word	0x48000400

08001378 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001388:	d10c      	bne.n	80013a4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_TIM_PWM_MspInit+0x5c>)
 800138c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138e:	4a11      	ldr	r2, [pc, #68]	; (80013d4 <HAL_TIM_PWM_MspInit+0x5c>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6593      	str	r3, [r2, #88]	; 0x58
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <HAL_TIM_PWM_MspInit+0x5c>)
 8001398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013a2:	e010      	b.n	80013c6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <HAL_TIM_PWM_MspInit+0x60>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d10b      	bne.n	80013c6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <HAL_TIM_PWM_MspInit+0x5c>)
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	4a08      	ldr	r2, [pc, #32]	; (80013d4 <HAL_TIM_PWM_MspInit+0x5c>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	6593      	str	r3, [r2, #88]	; 0x58
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_TIM_PWM_MspInit+0x5c>)
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
}
 80013c6:	bf00      	nop
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40000400 	.word	0x40000400

080013dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013fc:	d11e      	bne.n	800143c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <HAL_TIM_MspPostInit+0xac>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	4a21      	ldr	r2, [pc, #132]	; (8001488 <HAL_TIM_MspPostInit+0xac>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <HAL_TIM_MspPostInit+0xac>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA2     ------> TIM2_CH3
    PA15 (JTDI)     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001416:	f248 0304 	movw	r3, #32772	; 0x8004
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001428:	2301      	movs	r3, #1
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001436:	f000 fa77 	bl	8001928 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800143a:	e020      	b.n	800147e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a12      	ldr	r2, [pc, #72]	; (800148c <HAL_TIM_MspPostInit+0xb0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d11b      	bne.n	800147e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_TIM_MspPostInit+0xac>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <HAL_TIM_MspPostInit+0xac>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <HAL_TIM_MspPostInit+0xac>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800145e:	2302      	movs	r3, #2
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800146e:	2302      	movs	r3, #2
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4805      	ldr	r0, [pc, #20]	; (8001490 <HAL_TIM_MspPostInit+0xb4>)
 800147a:	f000 fa55 	bl	8001928 <HAL_GPIO_Init>
}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	; 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000
 800148c:	40000400 	.word	0x40000400
 8001490:	48000400 	.word	0x48000400

08001494 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a17      	ldr	r2, [pc, #92]	; (8001510 <HAL_UART_MspInit+0x7c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d127      	bne.n	8001506 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_UART_MspInit+0x80>)
 80014b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ba:	4a16      	ldr	r2, [pc, #88]	; (8001514 <HAL_UART_MspInit+0x80>)
 80014bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c0:	6613      	str	r3, [r2, #96]	; 0x60
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <HAL_UART_MspInit+0x80>)
 80014c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_UART_MspInit+0x80>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	4a10      	ldr	r2, [pc, #64]	; (8001514 <HAL_UART_MspInit+0x80>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_UART_MspInit+0x80>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014e6:	23c0      	movs	r3, #192	; 0xc0
 80014e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014f6:	2307      	movs	r3, #7
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	4805      	ldr	r0, [pc, #20]	; (8001518 <HAL_UART_MspInit+0x84>)
 8001502:	f000 fa11 	bl	8001928 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001506:	bf00      	nop
 8001508:	3728      	adds	r7, #40	; 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40013800 	.word	0x40013800
 8001514:	40021000 	.word	0x40021000
 8001518:	48000400 	.word	0x48000400

0800151c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <HardFault_Handler+0x4>

08001530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <MemManage_Handler+0x4>

08001536 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <UsageFault_Handler+0x4>

08001542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001570:	f000 f8b4 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}

08001578 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800157c:	4b17      	ldr	r3, [pc, #92]	; (80015dc <SystemInit+0x64>)
 800157e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001582:	4a16      	ldr	r2, [pc, #88]	; (80015dc <SystemInit+0x64>)
 8001584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <SystemInit+0x68>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a13      	ldr	r2, [pc, #76]	; (80015e0 <SystemInit+0x68>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <SystemInit+0x68>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <SystemInit+0x68>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a0f      	ldr	r2, [pc, #60]	; (80015e0 <SystemInit+0x68>)
 80015a4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015a8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80015ac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <SystemInit+0x68>)
 80015b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015b4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <SystemInit+0x68>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <SystemInit+0x68>)
 80015bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <SystemInit+0x68>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <SystemInit+0x64>)
 80015ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015ce:	609a      	str	r2, [r3, #8]
#endif
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00
 80015e0:	40021000 	.word	0x40021000

080015e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800161c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80015e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80015ea:	e003      	b.n	80015f4 <LoopCopyDataInit>

080015ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80015ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80015f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80015f2:	3104      	adds	r1, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80015f4:	480b      	ldr	r0, [pc, #44]	; (8001624 <LoopForever+0xa>)
	ldr	r3, =_edata
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <LoopForever+0xe>)
	adds	r2, r0, r1
 80015f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80015fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80015fc:	d3f6      	bcc.n	80015ec <CopyDataInit>
	ldr	r2, =_sbss
 80015fe:	4a0b      	ldr	r2, [pc, #44]	; (800162c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001600:	e002      	b.n	8001608 <LoopFillZerobss>

08001602 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001602:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001604:	f842 3b04 	str.w	r3, [r2], #4

08001608 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <LoopForever+0x16>)
	cmp	r2, r3
 800160a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800160c:	d3f9      	bcc.n	8001602 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800160e:	f7ff ffb3 	bl	8001578 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001612:	f003 fe7d 	bl	8005310 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001616:	f7ff fc19 	bl	8000e4c <main>

0800161a <LoopForever>:

LoopForever:
    b LoopForever
 800161a:	e7fe      	b.n	800161a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800161c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001620:	080053d8 	.word	0x080053d8
	ldr	r0, =_sdata
 8001624:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001628:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800162c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001630:	20000178 	.word	0x20000178

08001634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC1_2_IRQHandler>

08001636 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800163c:	2300      	movs	r3, #0
 800163e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001640:	2003      	movs	r0, #3
 8001642:	f000 f93d 	bl	80018c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001646:	2000      	movs	r0, #0
 8001648:	f000 f80e 	bl	8001668 <HAL_InitTick>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d002      	beq.n	8001658 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	71fb      	strb	r3, [r7, #7]
 8001656:	e001      	b.n	800165c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001658:	f7ff fe26 	bl	80012a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800165c:	79fb      	ldrb	r3, [r7, #7]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <HAL_InitTick+0x68>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d022      	beq.n	80016c2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_InitTick+0x6c>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <HAL_InitTick+0x68>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001688:	fbb1 f3f3 	udiv	r3, r1, r3
 800168c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001690:	4618      	mov	r0, r3
 8001692:	f000 f93c 	bl	800190e <HAL_SYSTICK_Config>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d10f      	bne.n	80016bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b0f      	cmp	r3, #15
 80016a0:	d809      	bhi.n	80016b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a2:	2200      	movs	r2, #0
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	f04f 30ff 	mov.w	r0, #4294967295
 80016aa:	f000 f914 	bl	80018d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <HAL_InitTick+0x70>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	e007      	b.n	80016c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	73fb      	strb	r3, [r7, #15]
 80016ba:	e004      	b.n	80016c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	e001      	b.n	80016c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000008 	.word	0x20000008
 80016d4:	20000000 	.word	0x20000000
 80016d8:	20000004 	.word	0x20000004

080016dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_IncTick+0x1c>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_IncTick+0x20>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4413      	add	r3, r2
 80016ea:	4a03      	ldr	r2, [pc, #12]	; (80016f8 <HAL_IncTick+0x1c>)
 80016ec:	6013      	str	r3, [r2, #0]
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	20000174 	.word	0x20000174
 80016fc:	20000008 	.word	0x20000008

08001700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <HAL_GetTick+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000174 	.word	0x20000174

08001718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff ffee 	bl	8001700 <HAL_GetTick>
 8001724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001730:	d004      	beq.n	800173c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_Delay+0x40>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	4413      	add	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800173c:	bf00      	nop
 800173e:	f7ff ffdf 	bl	8001700 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	429a      	cmp	r2, r3
 800174c:	d8f7      	bhi.n	800173e <HAL_Delay+0x26>
  {
  }
}
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000008 	.word	0x20000008

0800175c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001778:	4013      	ands	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178e:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	60d3      	str	r3, [r2, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <__NVIC_GetPriorityGrouping+0x18>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	f003 0307 	and.w	r3, r3, #7
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	6039      	str	r1, [r7, #0]
 80017ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	db0a      	blt.n	80017ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	490c      	ldr	r1, [pc, #48]	; (800180c <__NVIC_SetPriority+0x4c>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	0112      	lsls	r2, r2, #4
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	440b      	add	r3, r1
 80017e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e8:	e00a      	b.n	8001800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4908      	ldr	r1, [pc, #32]	; (8001810 <__NVIC_SetPriority+0x50>)
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	3b04      	subs	r3, #4
 80017f8:	0112      	lsls	r2, r2, #4
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	440b      	add	r3, r1
 80017fe:	761a      	strb	r2, [r3, #24]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000e100 	.word	0xe000e100
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001814:	b480      	push	{r7}
 8001816:	b089      	sub	sp, #36	; 0x24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f1c3 0307 	rsb	r3, r3, #7
 800182e:	2b04      	cmp	r3, #4
 8001830:	bf28      	it	cs
 8001832:	2304      	movcs	r3, #4
 8001834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3304      	adds	r3, #4
 800183a:	2b06      	cmp	r3, #6
 800183c:	d902      	bls.n	8001844 <NVIC_EncodePriority+0x30>
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3b03      	subs	r3, #3
 8001842:	e000      	b.n	8001846 <NVIC_EncodePriority+0x32>
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	f04f 32ff 	mov.w	r2, #4294967295
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43da      	mvns	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	401a      	ands	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800185c:	f04f 31ff 	mov.w	r1, #4294967295
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa01 f303 	lsl.w	r3, r1, r3
 8001866:	43d9      	mvns	r1, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	4313      	orrs	r3, r2
         );
}
 800186e:	4618      	mov	r0, r3
 8001870:	3724      	adds	r7, #36	; 0x24
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3b01      	subs	r3, #1
 8001888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800188c:	d301      	bcc.n	8001892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800188e:	2301      	movs	r3, #1
 8001890:	e00f      	b.n	80018b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001892:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <SysTick_Config+0x40>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800189a:	210f      	movs	r1, #15
 800189c:	f04f 30ff 	mov.w	r0, #4294967295
 80018a0:	f7ff ff8e 	bl	80017c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <SysTick_Config+0x40>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018aa:	4b04      	ldr	r3, [pc, #16]	; (80018bc <SysTick_Config+0x40>)
 80018ac:	2207      	movs	r2, #7
 80018ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	e000e010 	.word	0xe000e010

080018c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ff47 	bl	800175c <__NVIC_SetPriorityGrouping>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b086      	sub	sp, #24
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018e8:	f7ff ff5c 	bl	80017a4 <__NVIC_GetPriorityGrouping>
 80018ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	68b9      	ldr	r1, [r7, #8]
 80018f2:	6978      	ldr	r0, [r7, #20]
 80018f4:	f7ff ff8e 	bl	8001814 <NVIC_EncodePriority>
 80018f8:	4602      	mov	r2, r0
 80018fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fe:	4611      	mov	r1, r2
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff5d 	bl	80017c0 <__NVIC_SetPriority>
}
 8001906:	bf00      	nop
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ffb0 	bl	800187c <SysTick_Config>
 800191c:	4603      	mov	r3, r0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001928:	b480      	push	{r7}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001936:	e17f      	b.n	8001c38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	2101      	movs	r1, #1
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	fa01 f303 	lsl.w	r3, r1, r3
 8001944:	4013      	ands	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 8171 	beq.w	8001c32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d00b      	beq.n	8001970 <HAL_GPIO_Init+0x48>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b02      	cmp	r3, #2
 800195e:	d007      	beq.n	8001970 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001964:	2b11      	cmp	r3, #17
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b12      	cmp	r3, #18
 800196e:	d130      	bne.n	80019d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	2203      	movs	r2, #3
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019a6:	2201      	movs	r2, #1
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	091b      	lsrs	r3, r3, #4
 80019bc:	f003 0201 	and.w	r2, r3, #1
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d118      	bne.n	8001a10 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019e4:	2201      	movs	r2, #1
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	08db      	lsrs	r3, r3, #3
 80019fa:	f003 0201 	and.w	r2, r3, #1
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x128>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b12      	cmp	r3, #18
 8001a4e:	d123      	bne.n	8001a98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	08da      	lsrs	r2, r3, #3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3208      	adds	r2, #8
 8001a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	220f      	movs	r2, #15
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	08da      	lsrs	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3208      	adds	r2, #8
 8001a92:	6939      	ldr	r1, [r7, #16]
 8001a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0203 	and.w	r2, r3, #3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80ac 	beq.w	8001c32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ada:	4b5e      	ldr	r3, [pc, #376]	; (8001c54 <HAL_GPIO_Init+0x32c>)
 8001adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ade:	4a5d      	ldr	r2, [pc, #372]	; (8001c54 <HAL_GPIO_Init+0x32c>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ae6:	4b5b      	ldr	r3, [pc, #364]	; (8001c54 <HAL_GPIO_Init+0x32c>)
 8001ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001af2:	4a59      	ldr	r2, [pc, #356]	; (8001c58 <HAL_GPIO_Init+0x330>)
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	3302      	adds	r3, #2
 8001afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	220f      	movs	r2, #15
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b1c:	d025      	beq.n	8001b6a <HAL_GPIO_Init+0x242>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4e      	ldr	r2, [pc, #312]	; (8001c5c <HAL_GPIO_Init+0x334>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d01f      	beq.n	8001b66 <HAL_GPIO_Init+0x23e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4d      	ldr	r2, [pc, #308]	; (8001c60 <HAL_GPIO_Init+0x338>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d019      	beq.n	8001b62 <HAL_GPIO_Init+0x23a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4c      	ldr	r2, [pc, #304]	; (8001c64 <HAL_GPIO_Init+0x33c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d013      	beq.n	8001b5e <HAL_GPIO_Init+0x236>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4b      	ldr	r2, [pc, #300]	; (8001c68 <HAL_GPIO_Init+0x340>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00d      	beq.n	8001b5a <HAL_GPIO_Init+0x232>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a4a      	ldr	r2, [pc, #296]	; (8001c6c <HAL_GPIO_Init+0x344>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d007      	beq.n	8001b56 <HAL_GPIO_Init+0x22e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a49      	ldr	r2, [pc, #292]	; (8001c70 <HAL_GPIO_Init+0x348>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d101      	bne.n	8001b52 <HAL_GPIO_Init+0x22a>
 8001b4e:	2306      	movs	r3, #6
 8001b50:	e00c      	b.n	8001b6c <HAL_GPIO_Init+0x244>
 8001b52:	2307      	movs	r3, #7
 8001b54:	e00a      	b.n	8001b6c <HAL_GPIO_Init+0x244>
 8001b56:	2305      	movs	r3, #5
 8001b58:	e008      	b.n	8001b6c <HAL_GPIO_Init+0x244>
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	e006      	b.n	8001b6c <HAL_GPIO_Init+0x244>
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e004      	b.n	8001b6c <HAL_GPIO_Init+0x244>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e002      	b.n	8001b6c <HAL_GPIO_Init+0x244>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <HAL_GPIO_Init+0x244>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	f002 0203 	and.w	r2, r2, #3
 8001b72:	0092      	lsls	r2, r2, #2
 8001b74:	4093      	lsls	r3, r2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b7c:	4936      	ldr	r1, [pc, #216]	; (8001c58 <HAL_GPIO_Init+0x330>)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	089b      	lsrs	r3, r3, #2
 8001b82:	3302      	adds	r3, #2
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b8a:	4b3a      	ldr	r3, [pc, #232]	; (8001c74 <HAL_GPIO_Init+0x34c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4013      	ands	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bae:	4a31      	ldr	r2, [pc, #196]	; (8001c74 <HAL_GPIO_Init+0x34c>)
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001bb4:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <HAL_GPIO_Init+0x34c>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bd8:	4a26      	ldr	r2, [pc, #152]	; (8001c74 <HAL_GPIO_Init+0x34c>)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bde:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <HAL_GPIO_Init+0x34c>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c02:	4a1c      	ldr	r2, [pc, #112]	; (8001c74 <HAL_GPIO_Init+0x34c>)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <HAL_GPIO_Init+0x34c>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c2c:	4a11      	ldr	r2, [pc, #68]	; (8001c74 <HAL_GPIO_Init+0x34c>)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	3301      	adds	r3, #1
 8001c36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f47f ae78 	bne.w	8001938 <HAL_GPIO_Init+0x10>
  }
}
 8001c48:	bf00      	nop
 8001c4a:	371c      	adds	r7, #28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40010000 	.word	0x40010000
 8001c5c:	48000400 	.word	0x48000400
 8001c60:	48000800 	.word	0x48000800
 8001c64:	48000c00 	.word	0x48000c00
 8001c68:	48001000 	.word	0x48001000
 8001c6c:	48001400 	.word	0x48001400
 8001c70:	48001800 	.word	0x48001800
 8001c74:	40010400 	.word	0x40010400

08001c78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e081      	b.n	8001d8e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d106      	bne.n	8001ca4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff fb26 	bl	80012f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2224      	movs	r2, #36	; 0x24
 8001ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0201 	bic.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d107      	bne.n	8001cf2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	e006      	b.n	8001d00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001cfe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d104      	bne.n	8001d12 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691a      	ldr	r2, [r3, #16]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	ea42 0103 	orr.w	r1, r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	021a      	lsls	r2, r3, #8
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69d9      	ldr	r1, [r3, #28]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1a      	ldr	r2, [r3, #32]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af02      	add	r7, sp, #8
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	4608      	mov	r0, r1
 8001da2:	4611      	mov	r1, r2
 8001da4:	461a      	mov	r2, r3
 8001da6:	4603      	mov	r3, r0
 8001da8:	817b      	strh	r3, [r7, #10]
 8001daa:	460b      	mov	r3, r1
 8001dac:	813b      	strh	r3, [r7, #8]
 8001dae:	4613      	mov	r3, r2
 8001db0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b20      	cmp	r3, #32
 8001dbc:	f040 80f9 	bne.w	8001fb2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d002      	beq.n	8001dcc <HAL_I2C_Mem_Write+0x34>
 8001dc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d105      	bne.n	8001dd8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0ed      	b.n	8001fb4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_I2C_Mem_Write+0x4e>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e0e6      	b.n	8001fb4 <HAL_I2C_Mem_Write+0x21c>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001dee:	f7ff fc87 	bl	8001700 <HAL_GetTick>
 8001df2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	2319      	movs	r3, #25
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 fac3 	bl	800238c <I2C_WaitOnFlagUntilTimeout>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0d1      	b.n	8001fb4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2221      	movs	r2, #33	; 0x21
 8001e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2240      	movs	r2, #64	; 0x40
 8001e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6a3a      	ldr	r2, [r7, #32]
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e38:	88f8      	ldrh	r0, [r7, #6]
 8001e3a:	893a      	ldrh	r2, [r7, #8]
 8001e3c:	8979      	ldrh	r1, [r7, #10]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	4603      	mov	r3, r0
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 f9d3 	bl	80021f4 <I2C_RequestMemoryWrite>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0a9      	b.n	8001fb4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	2bff      	cmp	r3, #255	; 0xff
 8001e68:	d90e      	bls.n	8001e88 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	22ff      	movs	r2, #255	; 0xff
 8001e6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	8979      	ldrh	r1, [r7, #10]
 8001e78:	2300      	movs	r3, #0
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 fba5 	bl	80025d0 <I2C_TransferConfig>
 8001e86:	e00f      	b.n	8001ea8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	8979      	ldrh	r1, [r7, #10]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 fb94 	bl	80025d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 faad 	bl	800240c <I2C_WaitOnTXISFlagUntilTimeout>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e07b      	b.n	8001fb4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	781a      	ldrb	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d034      	beq.n	8001f60 <HAL_I2C_Mem_Write+0x1c8>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d130      	bne.n	8001f60 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f04:	2200      	movs	r2, #0
 8001f06:	2180      	movs	r1, #128	; 0x80
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 fa3f 	bl	800238c <I2C_WaitOnFlagUntilTimeout>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e04d      	b.n	8001fb4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	2bff      	cmp	r3, #255	; 0xff
 8001f20:	d90e      	bls.n	8001f40 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	22ff      	movs	r2, #255	; 0xff
 8001f26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	8979      	ldrh	r1, [r7, #10]
 8001f30:	2300      	movs	r3, #0
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 fb49 	bl	80025d0 <I2C_TransferConfig>
 8001f3e:	e00f      	b.n	8001f60 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	8979      	ldrh	r1, [r7, #10]
 8001f52:	2300      	movs	r3, #0
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 fb38 	bl	80025d0 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d19e      	bne.n	8001ea8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 fa8c 	bl	800248c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e01a      	b.n	8001fb4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2220      	movs	r2, #32
 8001f84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6859      	ldr	r1, [r3, #4]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_I2C_Mem_Write+0x224>)
 8001f92:	400b      	ands	r3, r1
 8001f94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e000      	b.n	8001fb4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001fb2:	2302      	movs	r3, #2
  }
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	fe00e800 	.word	0xfe00e800

08001fc0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	4608      	mov	r0, r1
 8001fca:	4611      	mov	r1, r2
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4603      	mov	r3, r0
 8001fd0:	817b      	strh	r3, [r7, #10]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	813b      	strh	r3, [r7, #8]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b20      	cmp	r3, #32
 8001fe4:	f040 80fd 	bne.w	80021e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <HAL_I2C_Mem_Read+0x34>
 8001fee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d105      	bne.n	8002000 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ffa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0f1      	b.n	80021e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_I2C_Mem_Read+0x4e>
 800200a:	2302      	movs	r3, #2
 800200c:	e0ea      	b.n	80021e4 <HAL_I2C_Mem_Read+0x224>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002016:	f7ff fb73 	bl	8001700 <HAL_GetTick>
 800201a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	2319      	movs	r3, #25
 8002022:	2201      	movs	r2, #1
 8002024:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 f9af 	bl	800238c <I2C_WaitOnFlagUntilTimeout>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0d5      	b.n	80021e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2222      	movs	r2, #34	; 0x22
 800203c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2240      	movs	r2, #64	; 0x40
 8002044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a3a      	ldr	r2, [r7, #32]
 8002052:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002058:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002060:	88f8      	ldrh	r0, [r7, #6]
 8002062:	893a      	ldrh	r2, [r7, #8]
 8002064:	8979      	ldrh	r1, [r7, #10]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	9301      	str	r3, [sp, #4]
 800206a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	4603      	mov	r3, r0
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 f913 	bl	800229c <I2C_RequestMemoryRead>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0ad      	b.n	80021e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208c:	b29b      	uxth	r3, r3
 800208e:	2bff      	cmp	r3, #255	; 0xff
 8002090:	d90e      	bls.n	80020b0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	22ff      	movs	r2, #255	; 0xff
 8002096:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209c:	b2da      	uxtb	r2, r3
 800209e:	8979      	ldrh	r1, [r7, #10]
 80020a0:	4b52      	ldr	r3, [pc, #328]	; (80021ec <HAL_I2C_Mem_Read+0x22c>)
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 fa91 	bl	80025d0 <I2C_TransferConfig>
 80020ae:	e00f      	b.n	80020d0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	8979      	ldrh	r1, [r7, #10]
 80020c2:	4b4a      	ldr	r3, [pc, #296]	; (80021ec <HAL_I2C_Mem_Read+0x22c>)
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 fa80 	bl	80025d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d6:	2200      	movs	r2, #0
 80020d8:	2104      	movs	r1, #4
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f956 	bl	800238c <I2C_WaitOnFlagUntilTimeout>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e07c      	b.n	80021e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002106:	3b01      	subs	r3, #1
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002112:	b29b      	uxth	r3, r3
 8002114:	3b01      	subs	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002120:	b29b      	uxth	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d034      	beq.n	8002190 <HAL_I2C_Mem_Read+0x1d0>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212a:	2b00      	cmp	r3, #0
 800212c:	d130      	bne.n	8002190 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002134:	2200      	movs	r2, #0
 8002136:	2180      	movs	r1, #128	; 0x80
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 f927 	bl	800238c <I2C_WaitOnFlagUntilTimeout>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e04d      	b.n	80021e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214c:	b29b      	uxth	r3, r3
 800214e:	2bff      	cmp	r3, #255	; 0xff
 8002150:	d90e      	bls.n	8002170 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	22ff      	movs	r2, #255	; 0xff
 8002156:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215c:	b2da      	uxtb	r2, r3
 800215e:	8979      	ldrh	r1, [r7, #10]
 8002160:	2300      	movs	r3, #0
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 fa31 	bl	80025d0 <I2C_TransferConfig>
 800216e:	e00f      	b.n	8002190 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002174:	b29a      	uxth	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217e:	b2da      	uxtb	r2, r3
 8002180:	8979      	ldrh	r1, [r7, #10]
 8002182:	2300      	movs	r3, #0
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 fa20 	bl	80025d0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002194:	b29b      	uxth	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d19a      	bne.n	80020d0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 f974 	bl	800248c <I2C_WaitOnSTOPFlagUntilTimeout>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e01a      	b.n	80021e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2220      	movs	r2, #32
 80021b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_I2C_Mem_Read+0x230>)
 80021c2:	400b      	ands	r3, r1
 80021c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80021e2:	2302      	movs	r3, #2
  }
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	80002400 	.word	0x80002400
 80021f0:	fe00e800 	.word	0xfe00e800

080021f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af02      	add	r7, sp, #8
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	4608      	mov	r0, r1
 80021fe:	4611      	mov	r1, r2
 8002200:	461a      	mov	r2, r3
 8002202:	4603      	mov	r3, r0
 8002204:	817b      	strh	r3, [r7, #10]
 8002206:	460b      	mov	r3, r1
 8002208:	813b      	strh	r3, [r7, #8]
 800220a:	4613      	mov	r3, r2
 800220c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	8979      	ldrh	r1, [r7, #10]
 8002214:	4b20      	ldr	r3, [pc, #128]	; (8002298 <I2C_RequestMemoryWrite+0xa4>)
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 f9d7 	bl	80025d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002222:	69fa      	ldr	r2, [r7, #28]
 8002224:	69b9      	ldr	r1, [r7, #24]
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 f8f0 	bl	800240c <I2C_WaitOnTXISFlagUntilTimeout>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e02c      	b.n	8002290 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d105      	bne.n	8002248 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800223c:	893b      	ldrh	r3, [r7, #8]
 800223e:	b2da      	uxtb	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	629a      	str	r2, [r3, #40]	; 0x28
 8002246:	e015      	b.n	8002274 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002248:	893b      	ldrh	r3, [r7, #8]
 800224a:	0a1b      	lsrs	r3, r3, #8
 800224c:	b29b      	uxth	r3, r3
 800224e:	b2da      	uxtb	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002256:	69fa      	ldr	r2, [r7, #28]
 8002258:	69b9      	ldr	r1, [r7, #24]
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 f8d6 	bl	800240c <I2C_WaitOnTXISFlagUntilTimeout>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e012      	b.n	8002290 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800226a:	893b      	ldrh	r3, [r7, #8]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	2200      	movs	r2, #0
 800227c:	2180      	movs	r1, #128	; 0x80
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f884 	bl	800238c <I2C_WaitOnFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	80002000 	.word	0x80002000

0800229c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	4608      	mov	r0, r1
 80022a6:	4611      	mov	r1, r2
 80022a8:	461a      	mov	r2, r3
 80022aa:	4603      	mov	r3, r0
 80022ac:	817b      	strh	r3, [r7, #10]
 80022ae:	460b      	mov	r3, r1
 80022b0:	813b      	strh	r3, [r7, #8]
 80022b2:	4613      	mov	r3, r2
 80022b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	8979      	ldrh	r1, [r7, #10]
 80022bc:	4b20      	ldr	r3, [pc, #128]	; (8002340 <I2C_RequestMemoryRead+0xa4>)
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2300      	movs	r3, #0
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f984 	bl	80025d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	69b9      	ldr	r1, [r7, #24]
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f89d 	bl	800240c <I2C_WaitOnTXISFlagUntilTimeout>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e02c      	b.n	8002336 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022dc:	88fb      	ldrh	r3, [r7, #6]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d105      	bne.n	80022ee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022e2:	893b      	ldrh	r3, [r7, #8]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28
 80022ec:	e015      	b.n	800231a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022ee:	893b      	ldrh	r3, [r7, #8]
 80022f0:	0a1b      	lsrs	r3, r3, #8
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	69b9      	ldr	r1, [r7, #24]
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 f883 	bl	800240c <I2C_WaitOnTXISFlagUntilTimeout>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e012      	b.n	8002336 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002310:	893b      	ldrh	r3, [r7, #8]
 8002312:	b2da      	uxtb	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	2200      	movs	r2, #0
 8002322:	2140      	movs	r1, #64	; 0x40
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 f831 	bl	800238c <I2C_WaitOnFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	80002000 	.word	0x80002000

08002344 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b02      	cmp	r3, #2
 8002358:	d103      	bne.n	8002362 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2200      	movs	r2, #0
 8002360:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b01      	cmp	r3, #1
 800236e:	d007      	beq.n	8002380 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699a      	ldr	r2, [r3, #24]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	619a      	str	r2, [r3, #24]
  }
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	4613      	mov	r3, r2
 800239a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800239c:	e022      	b.n	80023e4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a4:	d01e      	beq.n	80023e4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a6:	f7ff f9ab 	bl	8001700 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d302      	bcc.n	80023bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d113      	bne.n	80023e4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c0:	f043 0220 	orr.w	r2, r3, #32
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e00f      	b.n	8002404 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699a      	ldr	r2, [r3, #24]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	4013      	ands	r3, r2
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	bf0c      	ite	eq
 80023f4:	2301      	moveq	r3, #1
 80023f6:	2300      	movne	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d0cd      	beq.n	800239e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002418:	e02c      	b.n	8002474 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 f870 	bl	8002504 <I2C_IsAcknowledgeFailed>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e02a      	b.n	8002484 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002434:	d01e      	beq.n	8002474 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002436:	f7ff f963 	bl	8001700 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	429a      	cmp	r2, r3
 8002444:	d302      	bcc.n	800244c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d113      	bne.n	8002474 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002450:	f043 0220 	orr.w	r2, r3, #32
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e007      	b.n	8002484 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b02      	cmp	r3, #2
 8002480:	d1cb      	bne.n	800241a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002498:	e028      	b.n	80024ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f830 	bl	8002504 <I2C_IsAcknowledgeFailed>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e026      	b.n	80024fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ae:	f7ff f927 	bl	8001700 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d302      	bcc.n	80024c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d113      	bne.n	80024ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c8:	f043 0220 	orr.w	r2, r3, #32
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e007      	b.n	80024fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	f003 0320 	and.w	r3, r3, #32
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	d1cf      	bne.n	800249a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f003 0310 	and.w	r3, r3, #16
 800251a:	2b10      	cmp	r3, #16
 800251c:	d151      	bne.n	80025c2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800251e:	e022      	b.n	8002566 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002526:	d01e      	beq.n	8002566 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002528:	f7ff f8ea 	bl	8001700 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	429a      	cmp	r2, r3
 8002536:	d302      	bcc.n	800253e <I2C_IsAcknowledgeFailed+0x3a>
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d113      	bne.n	8002566 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	f043 0220 	orr.w	r2, r3, #32
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e02e      	b.n	80025c4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	2b20      	cmp	r3, #32
 8002572:	d1d5      	bne.n	8002520 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2210      	movs	r2, #16
 800257a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2220      	movs	r2, #32
 8002582:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f7ff fedd 	bl	8002344 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <I2C_IsAcknowledgeFailed+0xc8>)
 8002596:	400b      	ands	r3, r1
 8002598:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	f043 0204 	orr.w	r2, r3, #4
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	fe00e800 	.word	0xfe00e800

080025d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	607b      	str	r3, [r7, #4]
 80025da:	460b      	mov	r3, r1
 80025dc:	817b      	strh	r3, [r7, #10]
 80025de:	4613      	mov	r3, r2
 80025e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	0d5b      	lsrs	r3, r3, #21
 80025ec:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80025f0:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <I2C_TransferConfig+0x58>)
 80025f2:	430b      	orrs	r3, r1
 80025f4:	43db      	mvns	r3, r3
 80025f6:	ea02 0103 	and.w	r1, r2, r3
 80025fa:	897b      	ldrh	r3, [r7, #10]
 80025fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002600:	7a7b      	ldrb	r3, [r7, #9]
 8002602:	041b      	lsls	r3, r3, #16
 8002604:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	431a      	orrs	r2, r3
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	431a      	orrs	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	03ff63ff 	.word	0x03ff63ff

0800262c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b20      	cmp	r3, #32
 8002640:	d138      	bne.n	80026b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800264c:	2302      	movs	r3, #2
 800264e:	e032      	b.n	80026b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2224      	movs	r2, #36	; 0x24
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800267e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6819      	ldr	r1, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0201 	orr.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	e000      	b.n	80026b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026b4:	2302      	movs	r3, #2
  }
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b085      	sub	sp, #20
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b20      	cmp	r3, #32
 80026d6:	d139      	bne.n	800274c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e033      	b.n	800274e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2224      	movs	r2, #36	; 0x24
 80026f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0201 	bic.w	r2, r2, #1
 8002704:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002714:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	021b      	lsls	r3, r3, #8
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4313      	orrs	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	e000      	b.n	800274e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800274c:	2302      	movs	r3, #2
  }
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
	...

0800275c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002760:	4b04      	ldr	r3, [pc, #16]	; (8002774 <HAL_PWREx_GetVoltageRange+0x18>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002768:	4618      	mov	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40007000 	.word	0x40007000

08002778 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002786:	d130      	bne.n	80027ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002788:	4b23      	ldr	r3, [pc, #140]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002794:	d038      	beq.n	8002808 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800279e:	4a1e      	ldr	r2, [pc, #120]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027a6:	4b1d      	ldr	r3, [pc, #116]	; (800281c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2232      	movs	r2, #50	; 0x32
 80027ac:	fb02 f303 	mul.w	r3, r2, r3
 80027b0:	4a1b      	ldr	r2, [pc, #108]	; (8002820 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	0c9b      	lsrs	r3, r3, #18
 80027b8:	3301      	adds	r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027bc:	e002      	b.n	80027c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027c4:	4b14      	ldr	r3, [pc, #80]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d0:	d102      	bne.n	80027d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f2      	bne.n	80027be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027d8:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e4:	d110      	bne.n	8002808 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e00f      	b.n	800280a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f6:	d007      	beq.n	8002808 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027f8:	4b07      	ldr	r3, [pc, #28]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002800:	4a05      	ldr	r2, [pc, #20]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002802:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002806:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40007000 	.word	0x40007000
 800281c:	20000000 	.word	0x20000000
 8002820:	431bde83 	.word	0x431bde83

08002824 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e3d4      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002836:	4ba1      	ldr	r3, [pc, #644]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002840:	4b9e      	ldr	r3, [pc, #632]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 80e4 	beq.w	8002a20 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d007      	beq.n	800286e <HAL_RCC_OscConfig+0x4a>
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	2b0c      	cmp	r3, #12
 8002862:	f040 808b 	bne.w	800297c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2b01      	cmp	r3, #1
 800286a:	f040 8087 	bne.w	800297c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800286e:	4b93      	ldr	r3, [pc, #588]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <HAL_RCC_OscConfig+0x62>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e3ac      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1a      	ldr	r2, [r3, #32]
 800288a:	4b8c      	ldr	r3, [pc, #560]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d004      	beq.n	80028a0 <HAL_RCC_OscConfig+0x7c>
 8002896:	4b89      	ldr	r3, [pc, #548]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800289e:	e005      	b.n	80028ac <HAL_RCC_OscConfig+0x88>
 80028a0:	4b86      	ldr	r3, [pc, #536]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80028a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a6:	091b      	lsrs	r3, r3, #4
 80028a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d223      	bcs.n	80028f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fd3f 	bl	8003338 <RCC_SetFlashLatencyFromMSIRange>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e38d      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028c4:	4b7d      	ldr	r3, [pc, #500]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a7c      	ldr	r2, [pc, #496]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80028ca:	f043 0308 	orr.w	r3, r3, #8
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	4b7a      	ldr	r3, [pc, #488]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	4977      	ldr	r1, [pc, #476]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028e2:	4b76      	ldr	r3, [pc, #472]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	021b      	lsls	r3, r3, #8
 80028f0:	4972      	ldr	r1, [pc, #456]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	604b      	str	r3, [r1, #4]
 80028f6:	e025      	b.n	8002944 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028f8:	4b70      	ldr	r3, [pc, #448]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a6f      	ldr	r2, [pc, #444]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80028fe:	f043 0308 	orr.w	r3, r3, #8
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	4b6d      	ldr	r3, [pc, #436]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	496a      	ldr	r1, [pc, #424]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002916:	4b69      	ldr	r3, [pc, #420]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	021b      	lsls	r3, r3, #8
 8002924:	4965      	ldr	r1, [pc, #404]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002926:	4313      	orrs	r3, r2
 8002928:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d109      	bne.n	8002944 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	4618      	mov	r0, r3
 8002936:	f000 fcff 	bl	8003338 <RCC_SetFlashLatencyFromMSIRange>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e34d      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002944:	f000 fc36 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8002948:	4601      	mov	r1, r0
 800294a:	4b5c      	ldr	r3, [pc, #368]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	4a5a      	ldr	r2, [pc, #360]	; (8002ac0 <HAL_RCC_OscConfig+0x29c>)
 8002956:	5cd3      	ldrb	r3, [r2, r3]
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	fa21 f303 	lsr.w	r3, r1, r3
 8002960:	4a58      	ldr	r2, [pc, #352]	; (8002ac4 <HAL_RCC_OscConfig+0x2a0>)
 8002962:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002964:	4b58      	ldr	r3, [pc, #352]	; (8002ac8 <HAL_RCC_OscConfig+0x2a4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe fe7d 	bl	8001668 <HAL_InitTick>
 800296e:	4603      	mov	r3, r0
 8002970:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d052      	beq.n	8002a1e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	e331      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d032      	beq.n	80029ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002984:	4b4d      	ldr	r3, [pc, #308]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a4c      	ldr	r2, [pc, #304]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002990:	f7fe feb6 	bl	8001700 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002998:	f7fe feb2 	bl	8001700 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e31a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029aa:	4b44      	ldr	r3, [pc, #272]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029b6:	4b41      	ldr	r3, [pc, #260]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a40      	ldr	r2, [pc, #256]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80029bc:	f043 0308 	orr.w	r3, r3, #8
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	4b3e      	ldr	r3, [pc, #248]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	493b      	ldr	r1, [pc, #236]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029d4:	4b39      	ldr	r3, [pc, #228]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	4936      	ldr	r1, [pc, #216]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]
 80029e8:	e01a      	b.n	8002a20 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029ea:	4b34      	ldr	r3, [pc, #208]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a33      	ldr	r2, [pc, #204]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029f6:	f7fe fe83 	bl	8001700 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029fe:	f7fe fe7f 	bl	8001700 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e2e7      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a10:	4b2a      	ldr	r3, [pc, #168]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1f0      	bne.n	80029fe <HAL_RCC_OscConfig+0x1da>
 8002a1c:	e000      	b.n	8002a20 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a1e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d074      	beq.n	8002b16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d005      	beq.n	8002a3e <HAL_RCC_OscConfig+0x21a>
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	2b0c      	cmp	r3, #12
 8002a36:	d10e      	bne.n	8002a56 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d10b      	bne.n	8002a56 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3e:	4b1f      	ldr	r3, [pc, #124]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d064      	beq.n	8002b14 <HAL_RCC_OscConfig+0x2f0>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d160      	bne.n	8002b14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e2c4      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a5e:	d106      	bne.n	8002a6e <HAL_RCC_OscConfig+0x24a>
 8002a60:	4b16      	ldr	r3, [pc, #88]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a15      	ldr	r2, [pc, #84]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	e01d      	b.n	8002aaa <HAL_RCC_OscConfig+0x286>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a76:	d10c      	bne.n	8002a92 <HAL_RCC_OscConfig+0x26e>
 8002a78:	4b10      	ldr	r3, [pc, #64]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0f      	ldr	r2, [pc, #60]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002a7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a0c      	ldr	r2, [pc, #48]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	e00b      	b.n	8002aaa <HAL_RCC_OscConfig+0x286>
 8002a92:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a09      	ldr	r2, [pc, #36]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4b07      	ldr	r3, [pc, #28]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a06      	ldr	r2, [pc, #24]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002aa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d01c      	beq.n	8002aec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab2:	f7fe fe25 	bl	8001700 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ab8:	e011      	b.n	8002ade <HAL_RCC_OscConfig+0x2ba>
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	08005380 	.word	0x08005380
 8002ac4:	20000000 	.word	0x20000000
 8002ac8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002acc:	f7fe fe18 	bl	8001700 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b64      	cmp	r3, #100	; 0x64
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e280      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ade:	4baf      	ldr	r3, [pc, #700]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x2a8>
 8002aea:	e014      	b.n	8002b16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fe fe08 	bl	8001700 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af4:	f7fe fe04 	bl	8001700 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	; 0x64
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e26c      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b06:	4ba5      	ldr	r3, [pc, #660]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x2d0>
 8002b12:	e000      	b.n	8002b16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d060      	beq.n	8002be4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d005      	beq.n	8002b34 <HAL_RCC_OscConfig+0x310>
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	2b0c      	cmp	r3, #12
 8002b2c:	d119      	bne.n	8002b62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d116      	bne.n	8002b62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b34:	4b99      	ldr	r3, [pc, #612]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_OscConfig+0x328>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e249      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4c:	4b93      	ldr	r3, [pc, #588]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	061b      	lsls	r3, r3, #24
 8002b5a:	4990      	ldr	r1, [pc, #576]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b60:	e040      	b.n	8002be4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d023      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b6a:	4b8c      	ldr	r3, [pc, #560]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a8b      	ldr	r2, [pc, #556]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b76:	f7fe fdc3 	bl	8001700 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7e:	f7fe fdbf 	bl	8001700 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e227      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b90:	4b82      	ldr	r3, [pc, #520]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9c:	4b7f      	ldr	r3, [pc, #508]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	061b      	lsls	r3, r3, #24
 8002baa:	497c      	ldr	r1, [pc, #496]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]
 8002bb0:	e018      	b.n	8002be4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb2:	4b7a      	ldr	r3, [pc, #488]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a79      	ldr	r2, [pc, #484]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbe:	f7fe fd9f 	bl	8001700 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc6:	f7fe fd9b 	bl	8001700 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e203      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bd8:	4b70      	ldr	r3, [pc, #448]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1f0      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d03c      	beq.n	8002c6a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d01c      	beq.n	8002c32 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf8:	4b68      	ldr	r3, [pc, #416]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bfe:	4a67      	ldr	r2, [pc, #412]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c08:	f7fe fd7a 	bl	8001700 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c10:	f7fe fd76 	bl	8001700 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e1de      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c22:	4b5e      	ldr	r3, [pc, #376]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0ef      	beq.n	8002c10 <HAL_RCC_OscConfig+0x3ec>
 8002c30:	e01b      	b.n	8002c6a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c32:	4b5a      	ldr	r3, [pc, #360]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c38:	4a58      	ldr	r2, [pc, #352]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002c3a:	f023 0301 	bic.w	r3, r3, #1
 8002c3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c42:	f7fe fd5d 	bl	8001700 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c4a:	f7fe fd59 	bl	8001700 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e1c1      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c5c:	4b4f      	ldr	r3, [pc, #316]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1ef      	bne.n	8002c4a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 80a6 	beq.w	8002dc4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c7c:	4b47      	ldr	r3, [pc, #284]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10d      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c88:	4b44      	ldr	r3, [pc, #272]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8c:	4a43      	ldr	r2, [pc, #268]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c92:	6593      	str	r3, [r2, #88]	; 0x58
 8002c94:	4b41      	ldr	r3, [pc, #260]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ca4:	4b3e      	ldr	r3, [pc, #248]	; (8002da0 <HAL_RCC_OscConfig+0x57c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d118      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cb0:	4b3b      	ldr	r3, [pc, #236]	; (8002da0 <HAL_RCC_OscConfig+0x57c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a3a      	ldr	r2, [pc, #232]	; (8002da0 <HAL_RCC_OscConfig+0x57c>)
 8002cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cbc:	f7fe fd20 	bl	8001700 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc4:	f7fe fd1c 	bl	8001700 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e184      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cd6:	4b32      	ldr	r3, [pc, #200]	; (8002da0 <HAL_RCC_OscConfig+0x57c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d108      	bne.n	8002cfc <HAL_RCC_OscConfig+0x4d8>
 8002cea:	4b2c      	ldr	r3, [pc, #176]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf0:	4a2a      	ldr	r2, [pc, #168]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cfa:	e024      	b.n	8002d46 <HAL_RCC_OscConfig+0x522>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b05      	cmp	r3, #5
 8002d02:	d110      	bne.n	8002d26 <HAL_RCC_OscConfig+0x502>
 8002d04:	4b25      	ldr	r3, [pc, #148]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0a:	4a24      	ldr	r2, [pc, #144]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002d0c:	f043 0304 	orr.w	r3, r3, #4
 8002d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d14:	4b21      	ldr	r3, [pc, #132]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1a:	4a20      	ldr	r2, [pc, #128]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d24:	e00f      	b.n	8002d46 <HAL_RCC_OscConfig+0x522>
 8002d26:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2c:	4a1b      	ldr	r2, [pc, #108]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002d2e:	f023 0301 	bic.w	r3, r3, #1
 8002d32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d36:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3c:	4a17      	ldr	r2, [pc, #92]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002d3e:	f023 0304 	bic.w	r3, r3, #4
 8002d42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d016      	beq.n	8002d7c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fcd7 	bl	8001700 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7fe fcd3 	bl	8001700 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e139      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0ed      	beq.n	8002d56 <HAL_RCC_OscConfig+0x532>
 8002d7a:	e01a      	b.n	8002db2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe fcc0 	bl	8001700 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d82:	e00f      	b.n	8002da4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d84:	f7fe fcbc 	bl	8001700 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d906      	bls.n	8002da4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e122      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002da4:	4b90      	ldr	r3, [pc, #576]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1e8      	bne.n	8002d84 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002db2:	7ffb      	ldrb	r3, [r7, #31]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d105      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db8:	4b8b      	ldr	r3, [pc, #556]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbc:	4a8a      	ldr	r2, [pc, #552]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002dbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8108 	beq.w	8002fde <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	f040 80d0 	bne.w	8002f78 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002dd8:	4b83      	ldr	r3, [pc, #524]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f003 0203 	and.w	r2, r3, #3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d130      	bne.n	8002e4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	3b01      	subs	r3, #1
 8002df8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d127      	bne.n	8002e4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e08:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d11f      	bne.n	8002e4e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e18:	2a07      	cmp	r2, #7
 8002e1a:	bf14      	ite	ne
 8002e1c:	2201      	movne	r2, #1
 8002e1e:	2200      	moveq	r2, #0
 8002e20:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d113      	bne.n	8002e4e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e30:	085b      	lsrs	r3, r3, #1
 8002e32:	3b01      	subs	r3, #1
 8002e34:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d109      	bne.n	8002e4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	085b      	lsrs	r3, r3, #1
 8002e46:	3b01      	subs	r3, #1
 8002e48:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d06e      	beq.n	8002f2c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	2b0c      	cmp	r3, #12
 8002e52:	d069      	beq.n	8002f28 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e54:	4b64      	ldr	r3, [pc, #400]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d105      	bne.n	8002e6c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e60:	4b61      	ldr	r3, [pc, #388]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0b7      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e70:	4b5d      	ldr	r3, [pc, #372]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a5c      	ldr	r2, [pc, #368]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e7a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e7c:	f7fe fc40 	bl	8001700 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e84:	f7fe fc3c 	bl	8001700 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e0a4      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e96:	4b54      	ldr	r3, [pc, #336]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea2:	4b51      	ldr	r3, [pc, #324]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	4b51      	ldr	r3, [pc, #324]	; (8002fec <HAL_RCC_OscConfig+0x7c8>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002eb2:	3a01      	subs	r2, #1
 8002eb4:	0112      	lsls	r2, r2, #4
 8002eb6:	4311      	orrs	r1, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ebc:	0212      	lsls	r2, r2, #8
 8002ebe:	4311      	orrs	r1, r2
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ec4:	0852      	lsrs	r2, r2, #1
 8002ec6:	3a01      	subs	r2, #1
 8002ec8:	0552      	lsls	r2, r2, #21
 8002eca:	4311      	orrs	r1, r2
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ed0:	0852      	lsrs	r2, r2, #1
 8002ed2:	3a01      	subs	r2, #1
 8002ed4:	0652      	lsls	r2, r2, #25
 8002ed6:	4311      	orrs	r1, r2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002edc:	0912      	lsrs	r2, r2, #4
 8002ede:	0452      	lsls	r2, r2, #17
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	4941      	ldr	r1, [pc, #260]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ee8:	4b3f      	ldr	r3, [pc, #252]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a3e      	ldr	r2, [pc, #248]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ef4:	4b3c      	ldr	r3, [pc, #240]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	4a3b      	ldr	r2, [pc, #236]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002efe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f00:	f7fe fbfe 	bl	8001700 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f08:	f7fe fbfa 	bl	8001700 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e062      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f1a:	4b33      	ldr	r3, [pc, #204]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f26:	e05a      	b.n	8002fde <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e059      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f2c:	4b2e      	ldr	r3, [pc, #184]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d152      	bne.n	8002fde <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f38:	4b2b      	ldr	r3, [pc, #172]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a2a      	ldr	r2, [pc, #168]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f44:	4b28      	ldr	r3, [pc, #160]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4a27      	ldr	r2, [pc, #156]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f50:	f7fe fbd6 	bl	8001700 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f58:	f7fe fbd2 	bl	8001700 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e03a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f6a:	4b1f      	ldr	r3, [pc, #124]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0x734>
 8002f76:	e032      	b.n	8002fde <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	2b0c      	cmp	r3, #12
 8002f7c:	d02d      	beq.n	8002fda <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7e:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a19      	ldr	r2, [pc, #100]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f88:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002f8a:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d105      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f96:	4b14      	ldr	r3, [pc, #80]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	4a13      	ldr	r2, [pc, #76]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f9c:	f023 0303 	bic.w	r3, r3, #3
 8002fa0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002fa2:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	4a10      	ldr	r2, [pc, #64]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002fa8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb2:	f7fe fba5 	bl	8001700 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fba:	f7fe fba1 	bl	8001700 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e009      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fcc:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f0      	bne.n	8002fba <HAL_RCC_OscConfig+0x796>
 8002fd8:	e001      	b.n	8002fde <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3720      	adds	r7, #32
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	f99d808c 	.word	0xf99d808c

08002ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0c8      	b.n	8003196 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003004:	4b66      	ldr	r3, [pc, #408]	; (80031a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d910      	bls.n	8003034 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003012:	4b63      	ldr	r3, [pc, #396]	; (80031a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f023 0207 	bic.w	r2, r3, #7
 800301a:	4961      	ldr	r1, [pc, #388]	; (80031a0 <HAL_RCC_ClockConfig+0x1b0>)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	4313      	orrs	r3, r2
 8003020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003022:	4b5f      	ldr	r3, [pc, #380]	; (80031a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d001      	beq.n	8003034 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0b0      	b.n	8003196 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d04c      	beq.n	80030da <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d107      	bne.n	8003058 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003048:	4b56      	ldr	r3, [pc, #344]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d121      	bne.n	8003098 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e09e      	b.n	8003196 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d107      	bne.n	8003070 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003060:	4b50      	ldr	r3, [pc, #320]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d115      	bne.n	8003098 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e092      	b.n	8003196 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d107      	bne.n	8003088 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003078:	4b4a      	ldr	r3, [pc, #296]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d109      	bne.n	8003098 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e086      	b.n	8003196 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003088:	4b46      	ldr	r3, [pc, #280]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e07e      	b.n	8003196 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003098:	4b42      	ldr	r3, [pc, #264]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f023 0203 	bic.w	r2, r3, #3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	493f      	ldr	r1, [pc, #252]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030aa:	f7fe fb29 	bl	8001700 <HAL_GetTick>
 80030ae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b0:	e00a      	b.n	80030c8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b2:	f7fe fb25 	bl	8001700 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e066      	b.n	8003196 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c8:	4b36      	ldr	r3, [pc, #216]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 020c 	and.w	r2, r3, #12
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d1eb      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d008      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e6:	4b2f      	ldr	r3, [pc, #188]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	492c      	ldr	r1, [pc, #176]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030f8:	4b29      	ldr	r3, [pc, #164]	; (80031a0 <HAL_RCC_ClockConfig+0x1b0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d210      	bcs.n	8003128 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003106:	4b26      	ldr	r3, [pc, #152]	; (80031a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 0207 	bic.w	r2, r3, #7
 800310e:	4924      	ldr	r1, [pc, #144]	; (80031a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003116:	4b22      	ldr	r3, [pc, #136]	; (80031a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d001      	beq.n	8003128 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e036      	b.n	8003196 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003134:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4918      	ldr	r1, [pc, #96]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003142:	4313      	orrs	r3, r2
 8003144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d009      	beq.n	8003166 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003152:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4910      	ldr	r1, [pc, #64]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003166:	f000 f825 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 800316a:	4601      	mov	r1, r0
 800316c:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	4a0c      	ldr	r2, [pc, #48]	; (80031a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003178:	5cd3      	ldrb	r3, [r2, r3]
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	fa21 f303 	lsr.w	r3, r1, r3
 8003182:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003186:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe fa6c 	bl	8001668 <HAL_InitTick>
 8003190:	4603      	mov	r3, r0
 8003192:	72fb      	strb	r3, [r7, #11]

  return status;
 8003194:	7afb      	ldrb	r3, [r7, #11]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40022000 	.word	0x40022000
 80031a4:	40021000 	.word	0x40021000
 80031a8:	08005380 	.word	0x08005380
 80031ac:	20000000 	.word	0x20000000
 80031b0:	20000004 	.word	0x20000004

080031b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b089      	sub	sp, #36	; 0x24
 80031b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	2300      	movs	r3, #0
 80031c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031c2:	4b3d      	ldr	r3, [pc, #244]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x104>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031cc:	4b3a      	ldr	r3, [pc, #232]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x104>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_RCC_GetSysClockFreq+0x34>
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	2b0c      	cmp	r3, #12
 80031e0:	d121      	bne.n	8003226 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d11e      	bne.n	8003226 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031e8:	4b33      	ldr	r3, [pc, #204]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x104>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d107      	bne.n	8003204 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031f4:	4b30      	ldr	r3, [pc, #192]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x104>)
 80031f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031fa:	0a1b      	lsrs	r3, r3, #8
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	e005      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003204:	4b2c      	ldr	r3, [pc, #176]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	091b      	lsrs	r3, r3, #4
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003210:	4a2a      	ldr	r2, [pc, #168]	; (80032bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003218:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10d      	bne.n	800323c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003224:	e00a      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	2b04      	cmp	r3, #4
 800322a:	d102      	bne.n	8003232 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800322c:	4b24      	ldr	r3, [pc, #144]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800322e:	61bb      	str	r3, [r7, #24]
 8003230:	e004      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	2b08      	cmp	r3, #8
 8003236:	d101      	bne.n	800323c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003238:	4b22      	ldr	r3, [pc, #136]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800323a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	2b0c      	cmp	r3, #12
 8003240:	d133      	bne.n	80032aa <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003242:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d002      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0xa4>
 8003252:	2b03      	cmp	r3, #3
 8003254:	d003      	beq.n	800325e <HAL_RCC_GetSysClockFreq+0xaa>
 8003256:	e005      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003258:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800325a:	617b      	str	r3, [r7, #20]
      break;
 800325c:	e005      	b.n	800326a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800325e:	4b19      	ldr	r3, [pc, #100]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003260:	617b      	str	r3, [r7, #20]
      break;
 8003262:	e002      	b.n	800326a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	617b      	str	r3, [r7, #20]
      break;
 8003268:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800326a:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x104>)
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	091b      	lsrs	r3, r3, #4
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	3301      	adds	r3, #1
 8003276:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003278:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x104>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	0a1b      	lsrs	r3, r3, #8
 800327e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	fb02 f203 	mul.w	r2, r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	fbb2 f3f3 	udiv	r3, r2, r3
 800328e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003290:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	0e5b      	lsrs	r3, r3, #25
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	3301      	adds	r3, #1
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032aa:	69bb      	ldr	r3, [r7, #24]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3724      	adds	r7, #36	; 0x24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	40021000 	.word	0x40021000
 80032bc:	08005398 	.word	0x08005398
 80032c0:	00f42400 	.word	0x00f42400
 80032c4:	007a1200 	.word	0x007a1200

080032c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032cc:	4b03      	ldr	r3, [pc, #12]	; (80032dc <HAL_RCC_GetHCLKFreq+0x14>)
 80032ce:	681b      	ldr	r3, [r3, #0]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	20000000 	.word	0x20000000

080032e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032e4:	f7ff fff0 	bl	80032c8 <HAL_RCC_GetHCLKFreq>
 80032e8:	4601      	mov	r1, r0
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	0a1b      	lsrs	r3, r3, #8
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	4a04      	ldr	r2, [pc, #16]	; (8003308 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032f6:	5cd3      	ldrb	r3, [r2, r3]
 80032f8:	f003 031f 	and.w	r3, r3, #31
 80032fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003300:	4618      	mov	r0, r3
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40021000 	.word	0x40021000
 8003308:	08005390 	.word	0x08005390

0800330c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003310:	f7ff ffda 	bl	80032c8 <HAL_RCC_GetHCLKFreq>
 8003314:	4601      	mov	r1, r0
 8003316:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	0adb      	lsrs	r3, r3, #11
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	4a04      	ldr	r2, [pc, #16]	; (8003334 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003322:	5cd3      	ldrb	r3, [r2, r3]
 8003324:	f003 031f 	and.w	r3, r3, #31
 8003328:	fa21 f303 	lsr.w	r3, r1, r3
}
 800332c:	4618      	mov	r0, r3
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40021000 	.word	0x40021000
 8003334:	08005390 	.word	0x08005390

08003338 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003340:	2300      	movs	r3, #0
 8003342:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003344:	4b2a      	ldr	r3, [pc, #168]	; (80033f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003350:	f7ff fa04 	bl	800275c <HAL_PWREx_GetVoltageRange>
 8003354:	6178      	str	r0, [r7, #20]
 8003356:	e014      	b.n	8003382 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003358:	4b25      	ldr	r3, [pc, #148]	; (80033f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800335a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335c:	4a24      	ldr	r2, [pc, #144]	; (80033f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800335e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003362:	6593      	str	r3, [r2, #88]	; 0x58
 8003364:	4b22      	ldr	r3, [pc, #136]	; (80033f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003370:	f7ff f9f4 	bl	800275c <HAL_PWREx_GetVoltageRange>
 8003374:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003376:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337a:	4a1d      	ldr	r2, [pc, #116]	; (80033f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800337c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003380:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003388:	d10b      	bne.n	80033a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b80      	cmp	r3, #128	; 0x80
 800338e:	d919      	bls.n	80033c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2ba0      	cmp	r3, #160	; 0xa0
 8003394:	d902      	bls.n	800339c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003396:	2302      	movs	r3, #2
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	e013      	b.n	80033c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800339c:	2301      	movs	r3, #1
 800339e:	613b      	str	r3, [r7, #16]
 80033a0:	e010      	b.n	80033c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b80      	cmp	r3, #128	; 0x80
 80033a6:	d902      	bls.n	80033ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033a8:	2303      	movs	r3, #3
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	e00a      	b.n	80033c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b80      	cmp	r3, #128	; 0x80
 80033b2:	d102      	bne.n	80033ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033b4:	2302      	movs	r3, #2
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	e004      	b.n	80033c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b70      	cmp	r3, #112	; 0x70
 80033be:	d101      	bne.n	80033c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033c0:	2301      	movs	r3, #1
 80033c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f023 0207 	bic.w	r2, r3, #7
 80033cc:	4909      	ldr	r1, [pc, #36]	; (80033f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033d4:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d001      	beq.n	80033e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40022000 	.word	0x40022000

080033f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003400:	2300      	movs	r3, #0
 8003402:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003404:	2300      	movs	r3, #0
 8003406:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003410:	2b00      	cmp	r3, #0
 8003412:	d03f      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800341c:	d01c      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800341e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003422:	d802      	bhi.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00e      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003428:	e01f      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800342a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800342e:	d003      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003430:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003434:	d01c      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003436:	e018      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003438:	4b85      	ldr	r3, [pc, #532]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	4a84      	ldr	r2, [pc, #528]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800343e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003442:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003444:	e015      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3304      	adds	r3, #4
 800344a:	2100      	movs	r1, #0
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fab9 	bl	80039c4 <RCCEx_PLLSAI1_Config>
 8003452:	4603      	mov	r3, r0
 8003454:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003456:	e00c      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3320      	adds	r3, #32
 800345c:	2100      	movs	r1, #0
 800345e:	4618      	mov	r0, r3
 8003460:	f000 fba0 	bl	8003ba4 <RCCEx_PLLSAI2_Config>
 8003464:	4603      	mov	r3, r0
 8003466:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003468:	e003      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	74fb      	strb	r3, [r7, #19]
      break;
 800346e:	e000      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003470:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003472:	7cfb      	ldrb	r3, [r7, #19]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10b      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003478:	4b75      	ldr	r3, [pc, #468]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003486:	4972      	ldr	r1, [pc, #456]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800348e:	e001      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003490:	7cfb      	ldrb	r3, [r7, #19]
 8003492:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d03f      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034a8:	d01c      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80034aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034ae:	d802      	bhi.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00e      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80034b4:	e01f      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80034b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034ba:	d003      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80034bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034c0:	d01c      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x104>
 80034c2:	e018      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034c4:	4b62      	ldr	r3, [pc, #392]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	4a61      	ldr	r2, [pc, #388]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034d0:	e015      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3304      	adds	r3, #4
 80034d6:	2100      	movs	r1, #0
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 fa73 	bl	80039c4 <RCCEx_PLLSAI1_Config>
 80034de:	4603      	mov	r3, r0
 80034e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034e2:	e00c      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3320      	adds	r3, #32
 80034e8:	2100      	movs	r1, #0
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fb5a 	bl	8003ba4 <RCCEx_PLLSAI2_Config>
 80034f0:	4603      	mov	r3, r0
 80034f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034f4:	e003      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	74fb      	strb	r3, [r7, #19]
      break;
 80034fa:	e000      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80034fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034fe:	7cfb      	ldrb	r3, [r7, #19]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10b      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003504:	4b52      	ldr	r3, [pc, #328]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003512:	494f      	ldr	r1, [pc, #316]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800351a:	e001      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351c:	7cfb      	ldrb	r3, [r7, #19]
 800351e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80a0 	beq.w	800366e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800352e:	2300      	movs	r3, #0
 8003530:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003532:	4b47      	ldr	r3, [pc, #284]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003542:	2300      	movs	r3, #0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00d      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003548:	4b41      	ldr	r3, [pc, #260]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800354a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354c:	4a40      	ldr	r2, [pc, #256]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800354e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003552:	6593      	str	r3, [r2, #88]	; 0x58
 8003554:	4b3e      	ldr	r3, [pc, #248]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003560:	2301      	movs	r3, #1
 8003562:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003564:	4b3b      	ldr	r3, [pc, #236]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a3a      	ldr	r2, [pc, #232]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800356a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003570:	f7fe f8c6 	bl	8001700 <HAL_GetTick>
 8003574:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003576:	e009      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003578:	f7fe f8c2 	bl	8001700 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d902      	bls.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	74fb      	strb	r3, [r7, #19]
        break;
 800358a:	e005      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800358c:	4b31      	ldr	r3, [pc, #196]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0ef      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003598:	7cfb      	ldrb	r3, [r7, #19]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d15c      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800359e:	4b2c      	ldr	r3, [pc, #176]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01f      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d019      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035bc:	4b24      	ldr	r3, [pc, #144]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035c8:	4b21      	ldr	r3, [pc, #132]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ce:	4a20      	ldr	r2, [pc, #128]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035d8:	4b1d      	ldr	r3, [pc, #116]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035de:	4a1c      	ldr	r2, [pc, #112]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035e8:	4a19      	ldr	r2, [pc, #100]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d016      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fa:	f7fe f881 	bl	8001700 <HAL_GetTick>
 80035fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003600:	e00b      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7fe f87d 	bl	8001700 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d902      	bls.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	74fb      	strb	r3, [r7, #19]
            break;
 8003618:	e006      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800361a:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800361c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0ec      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003628:	7cfb      	ldrb	r3, [r7, #19]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10c      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800362e:	4b08      	ldr	r3, [pc, #32]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003634:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800363e:	4904      	ldr	r1, [pc, #16]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003646:	e009      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003648:	7cfb      	ldrb	r3, [r7, #19]
 800364a:	74bb      	strb	r3, [r7, #18]
 800364c:	e006      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800364e:	bf00      	nop
 8003650:	40021000 	.word	0x40021000
 8003654:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003658:	7cfb      	ldrb	r3, [r7, #19]
 800365a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800365c:	7c7b      	ldrb	r3, [r7, #17]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d105      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003662:	4b9e      	ldr	r3, [pc, #632]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003666:	4a9d      	ldr	r2, [pc, #628]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800366c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800367a:	4b98      	ldr	r3, [pc, #608]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800367c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003680:	f023 0203 	bic.w	r2, r3, #3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	4994      	ldr	r1, [pc, #592]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00a      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800369c:	4b8f      	ldr	r3, [pc, #572]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800369e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a2:	f023 020c 	bic.w	r2, r3, #12
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036aa:	498c      	ldr	r1, [pc, #560]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036be:	4b87      	ldr	r3, [pc, #540]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	4983      	ldr	r1, [pc, #524]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036e0:	4b7e      	ldr	r3, [pc, #504]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	497b      	ldr	r1, [pc, #492]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0310 	and.w	r3, r3, #16
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00a      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003702:	4b76      	ldr	r3, [pc, #472]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003708:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003710:	4972      	ldr	r1, [pc, #456]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0320 	and.w	r3, r3, #32
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003724:	4b6d      	ldr	r3, [pc, #436]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003732:	496a      	ldr	r1, [pc, #424]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003746:	4b65      	ldr	r3, [pc, #404]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003754:	4961      	ldr	r1, [pc, #388]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003768:	4b5c      	ldr	r3, [pc, #368]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800376a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003776:	4959      	ldr	r1, [pc, #356]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800378a:	4b54      	ldr	r3, [pc, #336]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800378c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003790:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003798:	4950      	ldr	r1, [pc, #320]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037ac:	4b4b      	ldr	r3, [pc, #300]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ba:	4948      	ldr	r1, [pc, #288]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037ce:	4b43      	ldr	r3, [pc, #268]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037dc:	493f      	ldr	r1, [pc, #252]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d028      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037f0:	4b3a      	ldr	r3, [pc, #232]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037fe:	4937      	ldr	r1, [pc, #220]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800380a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800380e:	d106      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003810:	4b32      	ldr	r3, [pc, #200]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	4a31      	ldr	r2, [pc, #196]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800381a:	60d3      	str	r3, [r2, #12]
 800381c:	e011      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003822:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003826:	d10c      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3304      	adds	r3, #4
 800382c:	2101      	movs	r1, #1
 800382e:	4618      	mov	r0, r3
 8003830:	f000 f8c8 	bl	80039c4 <RCCEx_PLLSAI1_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003838:	7cfb      	ldrb	r3, [r7, #19]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800383e:	7cfb      	ldrb	r3, [r7, #19]
 8003840:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d028      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800384e:	4b23      	ldr	r3, [pc, #140]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003854:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	491f      	ldr	r1, [pc, #124]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003868:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800386c:	d106      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800386e:	4b1b      	ldr	r3, [pc, #108]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	4a1a      	ldr	r2, [pc, #104]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003874:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003878:	60d3      	str	r3, [r2, #12]
 800387a:	e011      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003880:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003884:	d10c      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3304      	adds	r3, #4
 800388a:	2101      	movs	r1, #1
 800388c:	4618      	mov	r0, r3
 800388e:	f000 f899 	bl	80039c4 <RCCEx_PLLSAI1_Config>
 8003892:	4603      	mov	r3, r0
 8003894:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003896:	7cfb      	ldrb	r3, [r7, #19]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800389c:	7cfb      	ldrb	r3, [r7, #19]
 800389e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d02b      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038ac:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ba:	4908      	ldr	r1, [pc, #32]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038ca:	d109      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038cc:	4b03      	ldr	r3, [pc, #12]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4a02      	ldr	r2, [pc, #8]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038d6:	60d3      	str	r3, [r2, #12]
 80038d8:	e014      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038e8:	d10c      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3304      	adds	r3, #4
 80038ee:	2101      	movs	r1, #1
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 f867 	bl	80039c4 <RCCEx_PLLSAI1_Config>
 80038f6:	4603      	mov	r3, r0
 80038f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038fa:	7cfb      	ldrb	r3, [r7, #19]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003900:	7cfb      	ldrb	r3, [r7, #19]
 8003902:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d02f      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003910:	4b2b      	ldr	r3, [pc, #172]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003916:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800391e:	4928      	ldr	r1, [pc, #160]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800392a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800392e:	d10d      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3304      	adds	r3, #4
 8003934:	2102      	movs	r1, #2
 8003936:	4618      	mov	r0, r3
 8003938:	f000 f844 	bl	80039c4 <RCCEx_PLLSAI1_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003940:	7cfb      	ldrb	r3, [r7, #19]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d014      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003946:	7cfb      	ldrb	r3, [r7, #19]
 8003948:	74bb      	strb	r3, [r7, #18]
 800394a:	e011      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003954:	d10c      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3320      	adds	r3, #32
 800395a:	2102      	movs	r1, #2
 800395c:	4618      	mov	r0, r3
 800395e:	f000 f921 	bl	8003ba4 <RCCEx_PLLSAI2_Config>
 8003962:	4603      	mov	r3, r0
 8003964:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003966:	7cfb      	ldrb	r3, [r7, #19]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800396c:	7cfb      	ldrb	r3, [r7, #19]
 800396e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800397c:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003982:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800398a:	490d      	ldr	r1, [pc, #52]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00b      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800399e:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ae:	4904      	ldr	r1, [pc, #16]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40021000 	.word	0x40021000

080039c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039d2:	4b73      	ldr	r3, [pc, #460]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d018      	beq.n	8003a10 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039de:	4b70      	ldr	r3, [pc, #448]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f003 0203 	and.w	r2, r3, #3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d10d      	bne.n	8003a0a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
       ||
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d009      	beq.n	8003a0a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039f6:	4b6a      	ldr	r3, [pc, #424]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	091b      	lsrs	r3, r3, #4
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
       ||
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d044      	beq.n	8003a94 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	73fb      	strb	r3, [r7, #15]
 8003a0e:	e041      	b.n	8003a94 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d00c      	beq.n	8003a32 <RCCEx_PLLSAI1_Config+0x6e>
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d013      	beq.n	8003a44 <RCCEx_PLLSAI1_Config+0x80>
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d120      	bne.n	8003a62 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a20:	4b5f      	ldr	r3, [pc, #380]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d11d      	bne.n	8003a68 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a30:	e01a      	b.n	8003a68 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a32:	4b5b      	ldr	r3, [pc, #364]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d116      	bne.n	8003a6c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a42:	e013      	b.n	8003a6c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a44:	4b56      	ldr	r3, [pc, #344]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10f      	bne.n	8003a70 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a50:	4b53      	ldr	r3, [pc, #332]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d109      	bne.n	8003a70 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a60:	e006      	b.n	8003a70 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	73fb      	strb	r3, [r7, #15]
      break;
 8003a66:	e004      	b.n	8003a72 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003a68:	bf00      	nop
 8003a6a:	e002      	b.n	8003a72 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003a6c:	bf00      	nop
 8003a6e:	e000      	b.n	8003a72 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003a70:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10d      	bne.n	8003a94 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a78:	4b49      	ldr	r3, [pc, #292]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6819      	ldr	r1, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	430b      	orrs	r3, r1
 8003a8e:	4944      	ldr	r1, [pc, #272]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d17d      	bne.n	8003b96 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a9a:	4b41      	ldr	r3, [pc, #260]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a40      	ldr	r2, [pc, #256]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003aa0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003aa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aa6:	f7fd fe2b 	bl	8001700 <HAL_GetTick>
 8003aaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003aac:	e009      	b.n	8003ac2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aae:	f7fd fe27 	bl	8001700 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d902      	bls.n	8003ac2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	73fb      	strb	r3, [r7, #15]
        break;
 8003ac0:	e005      	b.n	8003ace <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ac2:	4b37      	ldr	r3, [pc, #220]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1ef      	bne.n	8003aae <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d160      	bne.n	8003b96 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d111      	bne.n	8003afe <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ada:	4b31      	ldr	r3, [pc, #196]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6892      	ldr	r2, [r2, #8]
 8003aea:	0211      	lsls	r1, r2, #8
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	68d2      	ldr	r2, [r2, #12]
 8003af0:	0912      	lsrs	r2, r2, #4
 8003af2:	0452      	lsls	r2, r2, #17
 8003af4:	430a      	orrs	r2, r1
 8003af6:	492a      	ldr	r1, [pc, #168]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	610b      	str	r3, [r1, #16]
 8003afc:	e027      	b.n	8003b4e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d112      	bne.n	8003b2a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b04:	4b26      	ldr	r3, [pc, #152]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6892      	ldr	r2, [r2, #8]
 8003b14:	0211      	lsls	r1, r2, #8
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6912      	ldr	r2, [r2, #16]
 8003b1a:	0852      	lsrs	r2, r2, #1
 8003b1c:	3a01      	subs	r2, #1
 8003b1e:	0552      	lsls	r2, r2, #21
 8003b20:	430a      	orrs	r2, r1
 8003b22:	491f      	ldr	r1, [pc, #124]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	610b      	str	r3, [r1, #16]
 8003b28:	e011      	b.n	8003b4e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b32:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6892      	ldr	r2, [r2, #8]
 8003b3a:	0211      	lsls	r1, r2, #8
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6952      	ldr	r2, [r2, #20]
 8003b40:	0852      	lsrs	r2, r2, #1
 8003b42:	3a01      	subs	r2, #1
 8003b44:	0652      	lsls	r2, r2, #25
 8003b46:	430a      	orrs	r2, r1
 8003b48:	4915      	ldr	r1, [pc, #84]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b4e:	4b14      	ldr	r3, [pc, #80]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a13      	ldr	r2, [pc, #76]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b58:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5a:	f7fd fdd1 	bl	8001700 <HAL_GetTick>
 8003b5e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b60:	e009      	b.n	8003b76 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b62:	f7fd fdcd 	bl	8001700 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d902      	bls.n	8003b76 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	73fb      	strb	r3, [r7, #15]
          break;
 8003b74:	e005      	b.n	8003b82 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b76:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0ef      	beq.n	8003b62 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d106      	bne.n	8003b96 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b88:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	4903      	ldr	r1, [pc, #12]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40021000 	.word	0x40021000

08003ba4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bb2:	4b68      	ldr	r3, [pc, #416]	; (8003d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d018      	beq.n	8003bf0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003bbe:	4b65      	ldr	r3, [pc, #404]	; (8003d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f003 0203 	and.w	r2, r3, #3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d10d      	bne.n	8003bea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
       ||
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003bd6:	4b5f      	ldr	r3, [pc, #380]	; (8003d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
       ||
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d044      	beq.n	8003c74 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	73fb      	strb	r3, [r7, #15]
 8003bee:	e041      	b.n	8003c74 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d00c      	beq.n	8003c12 <RCCEx_PLLSAI2_Config+0x6e>
 8003bf8:	2b03      	cmp	r3, #3
 8003bfa:	d013      	beq.n	8003c24 <RCCEx_PLLSAI2_Config+0x80>
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d120      	bne.n	8003c42 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c00:	4b54      	ldr	r3, [pc, #336]	; (8003d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d11d      	bne.n	8003c48 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c10:	e01a      	b.n	8003c48 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c12:	4b50      	ldr	r3, [pc, #320]	; (8003d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d116      	bne.n	8003c4c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c22:	e013      	b.n	8003c4c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c24:	4b4b      	ldr	r3, [pc, #300]	; (8003d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10f      	bne.n	8003c50 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c30:	4b48      	ldr	r3, [pc, #288]	; (8003d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d109      	bne.n	8003c50 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c40:	e006      	b.n	8003c50 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
      break;
 8003c46:	e004      	b.n	8003c52 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003c48:	bf00      	nop
 8003c4a:	e002      	b.n	8003c52 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003c4c:	bf00      	nop
 8003c4e:	e000      	b.n	8003c52 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003c50:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10d      	bne.n	8003c74 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c58:	4b3e      	ldr	r3, [pc, #248]	; (8003d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6819      	ldr	r1, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	4939      	ldr	r1, [pc, #228]	; (8003d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d167      	bne.n	8003d4a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c7a:	4b36      	ldr	r3, [pc, #216]	; (8003d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a35      	ldr	r2, [pc, #212]	; (8003d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c86:	f7fd fd3b 	bl	8001700 <HAL_GetTick>
 8003c8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c8c:	e009      	b.n	8003ca2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c8e:	f7fd fd37 	bl	8001700 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d902      	bls.n	8003ca2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	73fb      	strb	r3, [r7, #15]
        break;
 8003ca0:	e005      	b.n	8003cae <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ca2:	4b2c      	ldr	r3, [pc, #176]	; (8003d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1ef      	bne.n	8003c8e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d14a      	bne.n	8003d4a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d111      	bne.n	8003cde <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cba:	4b26      	ldr	r3, [pc, #152]	; (8003d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6892      	ldr	r2, [r2, #8]
 8003cca:	0211      	lsls	r1, r2, #8
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	68d2      	ldr	r2, [r2, #12]
 8003cd0:	0912      	lsrs	r2, r2, #4
 8003cd2:	0452      	lsls	r2, r2, #17
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	491f      	ldr	r1, [pc, #124]	; (8003d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	614b      	str	r3, [r1, #20]
 8003cdc:	e011      	b.n	8003d02 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cde:	4b1d      	ldr	r3, [pc, #116]	; (8003d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ce6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6892      	ldr	r2, [r2, #8]
 8003cee:	0211      	lsls	r1, r2, #8
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6912      	ldr	r2, [r2, #16]
 8003cf4:	0852      	lsrs	r2, r2, #1
 8003cf6:	3a01      	subs	r2, #1
 8003cf8:	0652      	lsls	r2, r2, #25
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	4915      	ldr	r1, [pc, #84]	; (8003d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d02:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a13      	ldr	r2, [pc, #76]	; (8003d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0e:	f7fd fcf7 	bl	8001700 <HAL_GetTick>
 8003d12:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d14:	e009      	b.n	8003d2a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d16:	f7fd fcf3 	bl	8001700 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d902      	bls.n	8003d2a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	73fb      	strb	r3, [r7, #15]
          break;
 8003d28:	e005      	b.n	8003d36 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d2a:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0ef      	beq.n	8003d16 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d106      	bne.n	8003d4a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d3e:	695a      	ldr	r2, [r3, #20]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	4903      	ldr	r1, [pc, #12]	; (8003d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40021000 	.word	0x40021000

08003d58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e01d      	b.n	8003da6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d106      	bne.n	8003d84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7fd fafa 	bl	8001378 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3304      	adds	r3, #4
 8003d94:	4619      	mov	r1, r3
 8003d96:	4610      	mov	r0, r2
 8003d98:	f000 f97a 	bl	8004090 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	6839      	ldr	r1, [r7, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fcd4 	bl	8004770 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a1e      	ldr	r2, [pc, #120]	; (8003e48 <HAL_TIM_PWM_Start+0x98>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d013      	beq.n	8003dfa <HAL_TIM_PWM_Start+0x4a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a1d      	ldr	r2, [pc, #116]	; (8003e4c <HAL_TIM_PWM_Start+0x9c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d00e      	beq.n	8003dfa <HAL_TIM_PWM_Start+0x4a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1b      	ldr	r2, [pc, #108]	; (8003e50 <HAL_TIM_PWM_Start+0xa0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d009      	beq.n	8003dfa <HAL_TIM_PWM_Start+0x4a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1a      	ldr	r2, [pc, #104]	; (8003e54 <HAL_TIM_PWM_Start+0xa4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d004      	beq.n	8003dfa <HAL_TIM_PWM_Start+0x4a>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a18      	ldr	r2, [pc, #96]	; (8003e58 <HAL_TIM_PWM_Start+0xa8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d101      	bne.n	8003dfe <HAL_TIM_PWM_Start+0x4e>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e000      	b.n	8003e00 <HAL_TIM_PWM_Start+0x50>
 8003dfe:	2300      	movs	r3, #0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d007      	beq.n	8003e14 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e12:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <HAL_TIM_PWM_Start+0xac>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b06      	cmp	r3, #6
 8003e24:	d00b      	beq.n	8003e3e <HAL_TIM_PWM_Start+0x8e>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e2c:	d007      	beq.n	8003e3e <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0201 	orr.w	r2, r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40012c00 	.word	0x40012c00
 8003e4c:	40013400 	.word	0x40013400
 8003e50:	40014000 	.word	0x40014000
 8003e54:	40014400 	.word	0x40014400
 8003e58:	40014800 	.word	0x40014800
 8003e5c:	00010007 	.word	0x00010007

08003e60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e105      	b.n	8004086 <HAL_TIM_PWM_ConfigChannel+0x226>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2202      	movs	r2, #2
 8003e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b14      	cmp	r3, #20
 8003e8e:	f200 80f0 	bhi.w	8004072 <HAL_TIM_PWM_ConfigChannel+0x212>
 8003e92:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e98:	08003eed 	.word	0x08003eed
 8003e9c:	08004073 	.word	0x08004073
 8003ea0:	08004073 	.word	0x08004073
 8003ea4:	08004073 	.word	0x08004073
 8003ea8:	08003f2d 	.word	0x08003f2d
 8003eac:	08004073 	.word	0x08004073
 8003eb0:	08004073 	.word	0x08004073
 8003eb4:	08004073 	.word	0x08004073
 8003eb8:	08003f6f 	.word	0x08003f6f
 8003ebc:	08004073 	.word	0x08004073
 8003ec0:	08004073 	.word	0x08004073
 8003ec4:	08004073 	.word	0x08004073
 8003ec8:	08003faf 	.word	0x08003faf
 8003ecc:	08004073 	.word	0x08004073
 8003ed0:	08004073 	.word	0x08004073
 8003ed4:	08004073 	.word	0x08004073
 8003ed8:	08003ff1 	.word	0x08003ff1
 8003edc:	08004073 	.word	0x08004073
 8003ee0:	08004073 	.word	0x08004073
 8003ee4:	08004073 	.word	0x08004073
 8003ee8:	08004031 	.word	0x08004031
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68b9      	ldr	r1, [r7, #8]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 f966 	bl	80041c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699a      	ldr	r2, [r3, #24]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0208 	orr.w	r2, r2, #8
 8003f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699a      	ldr	r2, [r3, #24]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0204 	bic.w	r2, r2, #4
 8003f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6999      	ldr	r1, [r3, #24]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	619a      	str	r2, [r3, #24]
      break;
 8003f2a:	e0a3      	b.n	8004074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68b9      	ldr	r1, [r7, #8]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 f9d6 	bl	80042e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699a      	ldr	r2, [r3, #24]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699a      	ldr	r2, [r3, #24]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6999      	ldr	r1, [r3, #24]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	021a      	lsls	r2, r3, #8
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	619a      	str	r2, [r3, #24]
      break;
 8003f6c:	e082      	b.n	8004074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68b9      	ldr	r1, [r7, #8]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fa3f 	bl	80043f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69da      	ldr	r2, [r3, #28]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 0208 	orr.w	r2, r2, #8
 8003f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69da      	ldr	r2, [r3, #28]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0204 	bic.w	r2, r2, #4
 8003f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69d9      	ldr	r1, [r3, #28]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	61da      	str	r2, [r3, #28]
      break;
 8003fac:	e062      	b.n	8004074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68b9      	ldr	r1, [r7, #8]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 faa7 	bl	8004508 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69da      	ldr	r2, [r3, #28]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69da      	ldr	r2, [r3, #28]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69d9      	ldr	r1, [r3, #28]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	021a      	lsls	r2, r3, #8
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	61da      	str	r2, [r3, #28]
      break;
 8003fee:	e041      	b.n	8004074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 faf0 	bl	80045dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0208 	orr.w	r2, r2, #8
 800400a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0204 	bic.w	r2, r2, #4
 800401a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800402e:	e021      	b.n	8004074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fb34 	bl	80046a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800404a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800405a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	021a      	lsls	r2, r3, #8
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004070:	e000      	b.n	8004074 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8004072:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop

08004090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a40      	ldr	r2, [pc, #256]	; (80041a4 <TIM_Base_SetConfig+0x114>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d013      	beq.n	80040d0 <TIM_Base_SetConfig+0x40>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ae:	d00f      	beq.n	80040d0 <TIM_Base_SetConfig+0x40>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a3d      	ldr	r2, [pc, #244]	; (80041a8 <TIM_Base_SetConfig+0x118>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00b      	beq.n	80040d0 <TIM_Base_SetConfig+0x40>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a3c      	ldr	r2, [pc, #240]	; (80041ac <TIM_Base_SetConfig+0x11c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d007      	beq.n	80040d0 <TIM_Base_SetConfig+0x40>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a3b      	ldr	r2, [pc, #236]	; (80041b0 <TIM_Base_SetConfig+0x120>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d003      	beq.n	80040d0 <TIM_Base_SetConfig+0x40>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a3a      	ldr	r2, [pc, #232]	; (80041b4 <TIM_Base_SetConfig+0x124>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d108      	bne.n	80040e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	4313      	orrs	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a2f      	ldr	r2, [pc, #188]	; (80041a4 <TIM_Base_SetConfig+0x114>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d01f      	beq.n	800412a <TIM_Base_SetConfig+0x9a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f0:	d01b      	beq.n	800412a <TIM_Base_SetConfig+0x9a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a2c      	ldr	r2, [pc, #176]	; (80041a8 <TIM_Base_SetConfig+0x118>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d017      	beq.n	800412a <TIM_Base_SetConfig+0x9a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a2b      	ldr	r2, [pc, #172]	; (80041ac <TIM_Base_SetConfig+0x11c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d013      	beq.n	800412a <TIM_Base_SetConfig+0x9a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a2a      	ldr	r2, [pc, #168]	; (80041b0 <TIM_Base_SetConfig+0x120>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00f      	beq.n	800412a <TIM_Base_SetConfig+0x9a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a29      	ldr	r2, [pc, #164]	; (80041b4 <TIM_Base_SetConfig+0x124>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00b      	beq.n	800412a <TIM_Base_SetConfig+0x9a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a28      	ldr	r2, [pc, #160]	; (80041b8 <TIM_Base_SetConfig+0x128>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d007      	beq.n	800412a <TIM_Base_SetConfig+0x9a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a27      	ldr	r2, [pc, #156]	; (80041bc <TIM_Base_SetConfig+0x12c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d003      	beq.n	800412a <TIM_Base_SetConfig+0x9a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a26      	ldr	r2, [pc, #152]	; (80041c0 <TIM_Base_SetConfig+0x130>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d108      	bne.n	800413c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4313      	orrs	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a10      	ldr	r2, [pc, #64]	; (80041a4 <TIM_Base_SetConfig+0x114>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00f      	beq.n	8004188 <TIM_Base_SetConfig+0xf8>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a12      	ldr	r2, [pc, #72]	; (80041b4 <TIM_Base_SetConfig+0x124>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00b      	beq.n	8004188 <TIM_Base_SetConfig+0xf8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a11      	ldr	r2, [pc, #68]	; (80041b8 <TIM_Base_SetConfig+0x128>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d007      	beq.n	8004188 <TIM_Base_SetConfig+0xf8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a10      	ldr	r2, [pc, #64]	; (80041bc <TIM_Base_SetConfig+0x12c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d003      	beq.n	8004188 <TIM_Base_SetConfig+0xf8>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a0f      	ldr	r2, [pc, #60]	; (80041c0 <TIM_Base_SetConfig+0x130>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d103      	bne.n	8004190 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	615a      	str	r2, [r3, #20]
}
 8004196:	bf00      	nop
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40012c00 	.word	0x40012c00
 80041a8:	40000400 	.word	0x40000400
 80041ac:	40000800 	.word	0x40000800
 80041b0:	40000c00 	.word	0x40000c00
 80041b4:	40013400 	.word	0x40013400
 80041b8:	40014000 	.word	0x40014000
 80041bc:	40014400 	.word	0x40014400
 80041c0:	40014800 	.word	0x40014800

080041c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	f023 0201 	bic.w	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0303 	bic.w	r3, r3, #3
 80041fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f023 0302 	bic.w	r3, r3, #2
 8004210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a2c      	ldr	r2, [pc, #176]	; (80042d0 <TIM_OC1_SetConfig+0x10c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d00f      	beq.n	8004244 <TIM_OC1_SetConfig+0x80>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a2b      	ldr	r2, [pc, #172]	; (80042d4 <TIM_OC1_SetConfig+0x110>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00b      	beq.n	8004244 <TIM_OC1_SetConfig+0x80>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a2a      	ldr	r2, [pc, #168]	; (80042d8 <TIM_OC1_SetConfig+0x114>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d007      	beq.n	8004244 <TIM_OC1_SetConfig+0x80>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a29      	ldr	r2, [pc, #164]	; (80042dc <TIM_OC1_SetConfig+0x118>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d003      	beq.n	8004244 <TIM_OC1_SetConfig+0x80>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a28      	ldr	r2, [pc, #160]	; (80042e0 <TIM_OC1_SetConfig+0x11c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d10c      	bne.n	800425e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f023 0308 	bic.w	r3, r3, #8
 800424a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f023 0304 	bic.w	r3, r3, #4
 800425c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a1b      	ldr	r2, [pc, #108]	; (80042d0 <TIM_OC1_SetConfig+0x10c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00f      	beq.n	8004286 <TIM_OC1_SetConfig+0xc2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a1a      	ldr	r2, [pc, #104]	; (80042d4 <TIM_OC1_SetConfig+0x110>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d00b      	beq.n	8004286 <TIM_OC1_SetConfig+0xc2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a19      	ldr	r2, [pc, #100]	; (80042d8 <TIM_OC1_SetConfig+0x114>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d007      	beq.n	8004286 <TIM_OC1_SetConfig+0xc2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a18      	ldr	r2, [pc, #96]	; (80042dc <TIM_OC1_SetConfig+0x118>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d003      	beq.n	8004286 <TIM_OC1_SetConfig+0xc2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a17      	ldr	r2, [pc, #92]	; (80042e0 <TIM_OC1_SetConfig+0x11c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d111      	bne.n	80042aa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800428c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	621a      	str	r2, [r3, #32]
}
 80042c4:	bf00      	nop
 80042c6:	371c      	adds	r7, #28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	40012c00 	.word	0x40012c00
 80042d4:	40013400 	.word	0x40013400
 80042d8:	40014000 	.word	0x40014000
 80042dc:	40014400 	.word	0x40014400
 80042e0:	40014800 	.word	0x40014800

080042e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	f023 0210 	bic.w	r2, r3, #16
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800431e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	021b      	lsls	r3, r3, #8
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4313      	orrs	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f023 0320 	bic.w	r3, r3, #32
 8004332:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a28      	ldr	r2, [pc, #160]	; (80043e4 <TIM_OC2_SetConfig+0x100>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d003      	beq.n	8004350 <TIM_OC2_SetConfig+0x6c>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a27      	ldr	r2, [pc, #156]	; (80043e8 <TIM_OC2_SetConfig+0x104>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d10d      	bne.n	800436c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800436a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <TIM_OC2_SetConfig+0x100>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00f      	beq.n	8004394 <TIM_OC2_SetConfig+0xb0>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a1c      	ldr	r2, [pc, #112]	; (80043e8 <TIM_OC2_SetConfig+0x104>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d00b      	beq.n	8004394 <TIM_OC2_SetConfig+0xb0>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a1b      	ldr	r2, [pc, #108]	; (80043ec <TIM_OC2_SetConfig+0x108>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d007      	beq.n	8004394 <TIM_OC2_SetConfig+0xb0>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a1a      	ldr	r2, [pc, #104]	; (80043f0 <TIM_OC2_SetConfig+0x10c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d003      	beq.n	8004394 <TIM_OC2_SetConfig+0xb0>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a19      	ldr	r2, [pc, #100]	; (80043f4 <TIM_OC2_SetConfig+0x110>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d113      	bne.n	80043bc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800439a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	621a      	str	r2, [r3, #32]
}
 80043d6:	bf00      	nop
 80043d8:	371c      	adds	r7, #28
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40012c00 	.word	0x40012c00
 80043e8:	40013400 	.word	0x40013400
 80043ec:	40014000 	.word	0x40014000
 80043f0:	40014400 	.word	0x40014400
 80043f4:	40014800 	.word	0x40014800

080043f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0303 	bic.w	r3, r3, #3
 8004432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a27      	ldr	r2, [pc, #156]	; (80044f4 <TIM_OC3_SetConfig+0xfc>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d003      	beq.n	8004462 <TIM_OC3_SetConfig+0x6a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a26      	ldr	r2, [pc, #152]	; (80044f8 <TIM_OC3_SetConfig+0x100>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d10d      	bne.n	800447e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004468:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	4313      	orrs	r3, r2
 8004474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800447c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a1c      	ldr	r2, [pc, #112]	; (80044f4 <TIM_OC3_SetConfig+0xfc>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d00f      	beq.n	80044a6 <TIM_OC3_SetConfig+0xae>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a1b      	ldr	r2, [pc, #108]	; (80044f8 <TIM_OC3_SetConfig+0x100>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d00b      	beq.n	80044a6 <TIM_OC3_SetConfig+0xae>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a1a      	ldr	r2, [pc, #104]	; (80044fc <TIM_OC3_SetConfig+0x104>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d007      	beq.n	80044a6 <TIM_OC3_SetConfig+0xae>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a19      	ldr	r2, [pc, #100]	; (8004500 <TIM_OC3_SetConfig+0x108>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d003      	beq.n	80044a6 <TIM_OC3_SetConfig+0xae>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a18      	ldr	r2, [pc, #96]	; (8004504 <TIM_OC3_SetConfig+0x10c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d113      	bne.n	80044ce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	621a      	str	r2, [r3, #32]
}
 80044e8:	bf00      	nop
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	40012c00 	.word	0x40012c00
 80044f8:	40013400 	.word	0x40013400
 80044fc:	40014000 	.word	0x40014000
 8004500:	40014400 	.word	0x40014400
 8004504:	40014800 	.word	0x40014800

08004508 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800453a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	021b      	lsls	r3, r3, #8
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	4313      	orrs	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004556:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	031b      	lsls	r3, r3, #12
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a18      	ldr	r2, [pc, #96]	; (80045c8 <TIM_OC4_SetConfig+0xc0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00f      	beq.n	800458c <TIM_OC4_SetConfig+0x84>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a17      	ldr	r2, [pc, #92]	; (80045cc <TIM_OC4_SetConfig+0xc4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d00b      	beq.n	800458c <TIM_OC4_SetConfig+0x84>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a16      	ldr	r2, [pc, #88]	; (80045d0 <TIM_OC4_SetConfig+0xc8>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d007      	beq.n	800458c <TIM_OC4_SetConfig+0x84>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a15      	ldr	r2, [pc, #84]	; (80045d4 <TIM_OC4_SetConfig+0xcc>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d003      	beq.n	800458c <TIM_OC4_SetConfig+0x84>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a14      	ldr	r2, [pc, #80]	; (80045d8 <TIM_OC4_SetConfig+0xd0>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d109      	bne.n	80045a0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004592:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	019b      	lsls	r3, r3, #6
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	4313      	orrs	r3, r2
 800459e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	621a      	str	r2, [r3, #32]
}
 80045ba:	bf00      	nop
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40012c00 	.word	0x40012c00
 80045cc:	40013400 	.word	0x40013400
 80045d0:	40014000 	.word	0x40014000
 80045d4:	40014400 	.word	0x40014400
 80045d8:	40014800 	.word	0x40014800

080045dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800460a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004620:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	041b      	lsls	r3, r3, #16
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a17      	ldr	r2, [pc, #92]	; (8004690 <TIM_OC5_SetConfig+0xb4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00f      	beq.n	8004656 <TIM_OC5_SetConfig+0x7a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a16      	ldr	r2, [pc, #88]	; (8004694 <TIM_OC5_SetConfig+0xb8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00b      	beq.n	8004656 <TIM_OC5_SetConfig+0x7a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a15      	ldr	r2, [pc, #84]	; (8004698 <TIM_OC5_SetConfig+0xbc>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d007      	beq.n	8004656 <TIM_OC5_SetConfig+0x7a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a14      	ldr	r2, [pc, #80]	; (800469c <TIM_OC5_SetConfig+0xc0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d003      	beq.n	8004656 <TIM_OC5_SetConfig+0x7a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a13      	ldr	r2, [pc, #76]	; (80046a0 <TIM_OC5_SetConfig+0xc4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d109      	bne.n	800466a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800465c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	021b      	lsls	r3, r3, #8
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	621a      	str	r2, [r3, #32]
}
 8004684:	bf00      	nop
 8004686:	371c      	adds	r7, #28
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	40012c00 	.word	0x40012c00
 8004694:	40013400 	.word	0x40013400
 8004698:	40014000 	.word	0x40014000
 800469c:	40014400 	.word	0x40014400
 80046a0:	40014800 	.word	0x40014800

080046a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	021b      	lsls	r3, r3, #8
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	051b      	lsls	r3, r3, #20
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a18      	ldr	r2, [pc, #96]	; (800475c <TIM_OC6_SetConfig+0xb8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00f      	beq.n	8004720 <TIM_OC6_SetConfig+0x7c>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a17      	ldr	r2, [pc, #92]	; (8004760 <TIM_OC6_SetConfig+0xbc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00b      	beq.n	8004720 <TIM_OC6_SetConfig+0x7c>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a16      	ldr	r2, [pc, #88]	; (8004764 <TIM_OC6_SetConfig+0xc0>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d007      	beq.n	8004720 <TIM_OC6_SetConfig+0x7c>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a15      	ldr	r2, [pc, #84]	; (8004768 <TIM_OC6_SetConfig+0xc4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d003      	beq.n	8004720 <TIM_OC6_SetConfig+0x7c>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a14      	ldr	r2, [pc, #80]	; (800476c <TIM_OC6_SetConfig+0xc8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d109      	bne.n	8004734 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004726:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	029b      	lsls	r3, r3, #10
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	621a      	str	r2, [r3, #32]
}
 800474e:	bf00      	nop
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40012c00 	.word	0x40012c00
 8004760:	40013400 	.word	0x40013400
 8004764:	40014000 	.word	0x40014000
 8004768:	40014400 	.word	0x40014400
 800476c:	40014800 	.word	0x40014800

08004770 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f003 031f 	and.w	r3, r3, #31
 8004782:	2201      	movs	r2, #1
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a1a      	ldr	r2, [r3, #32]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	43db      	mvns	r3, r3
 8004792:	401a      	ands	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a1a      	ldr	r2, [r3, #32]
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f003 031f 	and.w	r3, r3, #31
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	fa01 f303 	lsl.w	r3, r1, r3
 80047a8:	431a      	orrs	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	621a      	str	r2, [r3, #32]
}
 80047ae:	bf00      	nop
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
	...

080047bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e068      	b.n	80048a6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a2e      	ldr	r2, [pc, #184]	; (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d004      	beq.n	8004808 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a2d      	ldr	r2, [pc, #180]	; (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d108      	bne.n	800481a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800480e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004820:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4313      	orrs	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a1e      	ldr	r2, [pc, #120]	; (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d01d      	beq.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004846:	d018      	beq.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1b      	ldr	r2, [pc, #108]	; (80048bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d013      	beq.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1a      	ldr	r2, [pc, #104]	; (80048c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00e      	beq.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a18      	ldr	r2, [pc, #96]	; (80048c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d009      	beq.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a13      	ldr	r2, [pc, #76]	; (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d004      	beq.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a14      	ldr	r2, [pc, #80]	; (80048c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d10c      	bne.n	8004894 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004880:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	4313      	orrs	r3, r2
 800488a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40012c00 	.word	0x40012c00
 80048b8:	40013400 	.word	0x40013400
 80048bc:	40000400 	.word	0x40000400
 80048c0:	40000800 	.word	0x40000800
 80048c4:	40000c00 	.word	0x40000c00
 80048c8:	40014000 	.word	0x40014000

080048cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e040      	b.n	8004960 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d106      	bne.n	80048f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fc fdd0 	bl	8001494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2224      	movs	r2, #36	; 0x24
 80048f8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0201 	bic.w	r2, r2, #1
 8004908:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f82c 	bl	8004968 <UART_SetConfig>
 8004910:	4603      	mov	r3, r0
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e022      	b.n	8004960 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fb92 	bl	800504c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004936:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689a      	ldr	r2, [r3, #8]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004946:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fc19 	bl	8005190 <UART_CheckIdleState>
 800495e:	4603      	mov	r3, r0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004968:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800496c:	b08a      	sub	sp, #40	; 0x28
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004972:	2300      	movs	r3, #0
 8004974:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689a      	ldr	r2, [r3, #8]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	4313      	orrs	r3, r2
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	4bb8      	ldr	r3, [pc, #736]	; (8004c80 <UART_SetConfig+0x318>)
 800499e:	4013      	ands	r3, r2
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049a6:	430b      	orrs	r3, r1
 80049a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68da      	ldr	r2, [r3, #12]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4aae      	ldr	r2, [pc, #696]	; (8004c84 <UART_SetConfig+0x31c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d004      	beq.n	80049da <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d6:	4313      	orrs	r3, r2
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ea:	430a      	orrs	r2, r1
 80049ec:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4aa5      	ldr	r2, [pc, #660]	; (8004c88 <UART_SetConfig+0x320>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d126      	bne.n	8004a46 <UART_SetConfig+0xde>
 80049f8:	4ba4      	ldr	r3, [pc, #656]	; (8004c8c <UART_SetConfig+0x324>)
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fe:	f003 0303 	and.w	r3, r3, #3
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	d81a      	bhi.n	8004a3c <UART_SetConfig+0xd4>
 8004a06:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <UART_SetConfig+0xa4>)
 8004a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0c:	08004a1d 	.word	0x08004a1d
 8004a10:	08004a2d 	.word	0x08004a2d
 8004a14:	08004a25 	.word	0x08004a25
 8004a18:	08004a35 	.word	0x08004a35
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a22:	e105      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004a24:	2302      	movs	r3, #2
 8004a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a2a:	e101      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004a2c:	2304      	movs	r3, #4
 8004a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a32:	e0fd      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004a34:	2308      	movs	r3, #8
 8004a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a3a:	e0f9      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004a3c:	2310      	movs	r3, #16
 8004a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a42:	bf00      	nop
 8004a44:	e0f4      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a91      	ldr	r2, [pc, #580]	; (8004c90 <UART_SetConfig+0x328>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d138      	bne.n	8004ac2 <UART_SetConfig+0x15a>
 8004a50:	4b8e      	ldr	r3, [pc, #568]	; (8004c8c <UART_SetConfig+0x324>)
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a56:	f003 030c 	and.w	r3, r3, #12
 8004a5a:	2b0c      	cmp	r3, #12
 8004a5c:	d82c      	bhi.n	8004ab8 <UART_SetConfig+0x150>
 8004a5e:	a201      	add	r2, pc, #4	; (adr r2, 8004a64 <UART_SetConfig+0xfc>)
 8004a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a64:	08004a99 	.word	0x08004a99
 8004a68:	08004ab9 	.word	0x08004ab9
 8004a6c:	08004ab9 	.word	0x08004ab9
 8004a70:	08004ab9 	.word	0x08004ab9
 8004a74:	08004aa9 	.word	0x08004aa9
 8004a78:	08004ab9 	.word	0x08004ab9
 8004a7c:	08004ab9 	.word	0x08004ab9
 8004a80:	08004ab9 	.word	0x08004ab9
 8004a84:	08004aa1 	.word	0x08004aa1
 8004a88:	08004ab9 	.word	0x08004ab9
 8004a8c:	08004ab9 	.word	0x08004ab9
 8004a90:	08004ab9 	.word	0x08004ab9
 8004a94:	08004ab1 	.word	0x08004ab1
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a9e:	e0c7      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aa6:	e0c3      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004aa8:	2304      	movs	r3, #4
 8004aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aae:	e0bf      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004ab0:	2308      	movs	r3, #8
 8004ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ab6:	e0bb      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004ab8:	2310      	movs	r3, #16
 8004aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004abe:	bf00      	nop
 8004ac0:	e0b6      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a73      	ldr	r2, [pc, #460]	; (8004c94 <UART_SetConfig+0x32c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d125      	bne.n	8004b18 <UART_SetConfig+0x1b0>
 8004acc:	4b6f      	ldr	r3, [pc, #444]	; (8004c8c <UART_SetConfig+0x324>)
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ad6:	2b10      	cmp	r3, #16
 8004ad8:	d011      	beq.n	8004afe <UART_SetConfig+0x196>
 8004ada:	2b10      	cmp	r3, #16
 8004adc:	d802      	bhi.n	8004ae4 <UART_SetConfig+0x17c>
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <UART_SetConfig+0x186>
 8004ae2:	e014      	b.n	8004b0e <UART_SetConfig+0x1a6>
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	d006      	beq.n	8004af6 <UART_SetConfig+0x18e>
 8004ae8:	2b30      	cmp	r3, #48	; 0x30
 8004aea:	d00c      	beq.n	8004b06 <UART_SetConfig+0x19e>
 8004aec:	e00f      	b.n	8004b0e <UART_SetConfig+0x1a6>
 8004aee:	2300      	movs	r3, #0
 8004af0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af4:	e09c      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004af6:	2302      	movs	r3, #2
 8004af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004afc:	e098      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004afe:	2304      	movs	r3, #4
 8004b00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b04:	e094      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004b06:	2308      	movs	r3, #8
 8004b08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b0c:	e090      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004b0e:	2310      	movs	r3, #16
 8004b10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b14:	bf00      	nop
 8004b16:	e08b      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a5e      	ldr	r2, [pc, #376]	; (8004c98 <UART_SetConfig+0x330>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d125      	bne.n	8004b6e <UART_SetConfig+0x206>
 8004b22:	4b5a      	ldr	r3, [pc, #360]	; (8004c8c <UART_SetConfig+0x324>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b28:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b2c:	2b40      	cmp	r3, #64	; 0x40
 8004b2e:	d011      	beq.n	8004b54 <UART_SetConfig+0x1ec>
 8004b30:	2b40      	cmp	r3, #64	; 0x40
 8004b32:	d802      	bhi.n	8004b3a <UART_SetConfig+0x1d2>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d005      	beq.n	8004b44 <UART_SetConfig+0x1dc>
 8004b38:	e014      	b.n	8004b64 <UART_SetConfig+0x1fc>
 8004b3a:	2b80      	cmp	r3, #128	; 0x80
 8004b3c:	d006      	beq.n	8004b4c <UART_SetConfig+0x1e4>
 8004b3e:	2bc0      	cmp	r3, #192	; 0xc0
 8004b40:	d00c      	beq.n	8004b5c <UART_SetConfig+0x1f4>
 8004b42:	e00f      	b.n	8004b64 <UART_SetConfig+0x1fc>
 8004b44:	2300      	movs	r3, #0
 8004b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b4a:	e071      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b52:	e06d      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004b54:	2304      	movs	r3, #4
 8004b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b5a:	e069      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004b5c:	2308      	movs	r3, #8
 8004b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b62:	e065      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004b64:	2310      	movs	r3, #16
 8004b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b6a:	bf00      	nop
 8004b6c:	e060      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a4a      	ldr	r2, [pc, #296]	; (8004c9c <UART_SetConfig+0x334>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d129      	bne.n	8004bcc <UART_SetConfig+0x264>
 8004b78:	4b44      	ldr	r3, [pc, #272]	; (8004c8c <UART_SetConfig+0x324>)
 8004b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b86:	d014      	beq.n	8004bb2 <UART_SetConfig+0x24a>
 8004b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b8c:	d802      	bhi.n	8004b94 <UART_SetConfig+0x22c>
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d007      	beq.n	8004ba2 <UART_SetConfig+0x23a>
 8004b92:	e016      	b.n	8004bc2 <UART_SetConfig+0x25a>
 8004b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b98:	d007      	beq.n	8004baa <UART_SetConfig+0x242>
 8004b9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b9e:	d00c      	beq.n	8004bba <UART_SetConfig+0x252>
 8004ba0:	e00f      	b.n	8004bc2 <UART_SetConfig+0x25a>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba8:	e042      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004baa:	2302      	movs	r3, #2
 8004bac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb0:	e03e      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004bb2:	2304      	movs	r3, #4
 8004bb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb8:	e03a      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004bba:	2308      	movs	r3, #8
 8004bbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc0:	e036      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004bc2:	2310      	movs	r3, #16
 8004bc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc8:	bf00      	nop
 8004bca:	e031      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a2c      	ldr	r2, [pc, #176]	; (8004c84 <UART_SetConfig+0x31c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d129      	bne.n	8004c2a <UART_SetConfig+0x2c2>
 8004bd6:	4b2d      	ldr	r3, [pc, #180]	; (8004c8c <UART_SetConfig+0x324>)
 8004bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bdc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be4:	d014      	beq.n	8004c10 <UART_SetConfig+0x2a8>
 8004be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bea:	d802      	bhi.n	8004bf2 <UART_SetConfig+0x28a>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d007      	beq.n	8004c00 <UART_SetConfig+0x298>
 8004bf0:	e016      	b.n	8004c20 <UART_SetConfig+0x2b8>
 8004bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bf6:	d007      	beq.n	8004c08 <UART_SetConfig+0x2a0>
 8004bf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bfc:	d00c      	beq.n	8004c18 <UART_SetConfig+0x2b0>
 8004bfe:	e00f      	b.n	8004c20 <UART_SetConfig+0x2b8>
 8004c00:	2300      	movs	r3, #0
 8004c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c06:	e013      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c0e:	e00f      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004c10:	2304      	movs	r3, #4
 8004c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c16:	e00b      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004c18:	2308      	movs	r3, #8
 8004c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c1e:	e007      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004c20:	2310      	movs	r3, #16
 8004c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c26:	bf00      	nop
 8004c28:	e002      	b.n	8004c30 <UART_SetConfig+0x2c8>
 8004c2a:	2310      	movs	r3, #16
 8004c2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a13      	ldr	r2, [pc, #76]	; (8004c84 <UART_SetConfig+0x31c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	f040 80fe 	bne.w	8004e38 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d837      	bhi.n	8004cb4 <UART_SetConfig+0x34c>
 8004c44:	a201      	add	r2, pc, #4	; (adr r2, 8004c4c <UART_SetConfig+0x2e4>)
 8004c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4a:	bf00      	nop
 8004c4c:	08004c71 	.word	0x08004c71
 8004c50:	08004cb5 	.word	0x08004cb5
 8004c54:	08004c79 	.word	0x08004c79
 8004c58:	08004cb5 	.word	0x08004cb5
 8004c5c:	08004ca5 	.word	0x08004ca5
 8004c60:	08004cb5 	.word	0x08004cb5
 8004c64:	08004cb5 	.word	0x08004cb5
 8004c68:	08004cb5 	.word	0x08004cb5
 8004c6c:	08004cad 	.word	0x08004cad
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004c70:	f7fe fb36 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 8004c74:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c76:	e020      	b.n	8004cba <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004c78:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <UART_SetConfig+0x338>)
 8004c7a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c7c:	e01d      	b.n	8004cba <UART_SetConfig+0x352>
 8004c7e:	bf00      	nop
 8004c80:	efff69f3 	.word	0xefff69f3
 8004c84:	40008000 	.word	0x40008000
 8004c88:	40013800 	.word	0x40013800
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	40004400 	.word	0x40004400
 8004c94:	40004800 	.word	0x40004800
 8004c98:	40004c00 	.word	0x40004c00
 8004c9c:	40005000 	.word	0x40005000
 8004ca0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004ca4:	f7fe fa86 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8004ca8:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004caa:	e006      	b.n	8004cba <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004cac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cb0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cb2:	e002      	b.n	8004cba <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	76fb      	strb	r3, [r7, #27]
        break;
 8004cb8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 81b9 	beq.w	8005034 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	4413      	add	r3, r2
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d305      	bcc.n	8004cde <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d902      	bls.n	8004ce4 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	76fb      	strb	r3, [r7, #27]
 8004ce2:	e1a7      	b.n	8005034 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8004ce4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	f200 8092 	bhi.w	8004e12 <UART_SetConfig+0x4aa>
 8004cee:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <UART_SetConfig+0x38c>)
 8004cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf4:	08004d19 	.word	0x08004d19
 8004cf8:	08004e13 	.word	0x08004e13
 8004cfc:	08004d67 	.word	0x08004d67
 8004d00:	08004e13 	.word	0x08004e13
 8004d04:	08004d9b 	.word	0x08004d9b
 8004d08:	08004e13 	.word	0x08004e13
 8004d0c:	08004e13 	.word	0x08004e13
 8004d10:	08004e13 	.word	0x08004e13
 8004d14:	08004de9 	.word	0x08004de9
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004d18:	f7fe fae2 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 8004d1c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	4619      	mov	r1, r3
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	f04f 0300 	mov.w	r3, #0
 8004d2a:	f04f 0400 	mov.w	r4, #0
 8004d2e:	0214      	lsls	r4, r2, #8
 8004d30:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004d34:	020b      	lsls	r3, r1, #8
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6852      	ldr	r2, [r2, #4]
 8004d3a:	0852      	lsrs	r2, r2, #1
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	eb13 0b01 	adds.w	fp, r3, r1
 8004d46:	eb44 0c02 	adc.w	ip, r4, r2
 8004d4a:	4658      	mov	r0, fp
 8004d4c:	4661      	mov	r1, ip
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f04f 0400 	mov.w	r4, #0
 8004d56:	461a      	mov	r2, r3
 8004d58:	4623      	mov	r3, r4
 8004d5a:	f7fb fe2b 	bl	80009b4 <__aeabi_uldivmod>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	460c      	mov	r4, r1
 8004d62:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004d64:	e058      	b.n	8004e18 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	085b      	lsrs	r3, r3, #1
 8004d6c:	f04f 0400 	mov.w	r4, #0
 8004d70:	49ae      	ldr	r1, [pc, #696]	; (800502c <UART_SetConfig+0x6c4>)
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	eb13 0b01 	adds.w	fp, r3, r1
 8004d7a:	eb44 0c02 	adc.w	ip, r4, r2
 8004d7e:	4658      	mov	r0, fp
 8004d80:	4661      	mov	r1, ip
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f04f 0400 	mov.w	r4, #0
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	4623      	mov	r3, r4
 8004d8e:	f7fb fe11 	bl	80009b4 <__aeabi_uldivmod>
 8004d92:	4603      	mov	r3, r0
 8004d94:	460c      	mov	r4, r1
 8004d96:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004d98:	e03e      	b.n	8004e18 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004d9a:	f7fe fa0b 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8004d9e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	4619      	mov	r1, r3
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	f04f 0400 	mov.w	r4, #0
 8004db0:	0214      	lsls	r4, r2, #8
 8004db2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004db6:	020b      	lsls	r3, r1, #8
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6852      	ldr	r2, [r2, #4]
 8004dbc:	0852      	lsrs	r2, r2, #1
 8004dbe:	4611      	mov	r1, r2
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	eb13 0b01 	adds.w	fp, r3, r1
 8004dc8:	eb44 0c02 	adc.w	ip, r4, r2
 8004dcc:	4658      	mov	r0, fp
 8004dce:	4661      	mov	r1, ip
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f04f 0400 	mov.w	r4, #0
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4623      	mov	r3, r4
 8004ddc:	f7fb fdea 	bl	80009b4 <__aeabi_uldivmod>
 8004de0:	4603      	mov	r3, r0
 8004de2:	460c      	mov	r4, r1
 8004de4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004de6:	e017      	b.n	8004e18 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	085b      	lsrs	r3, r3, #1
 8004dee:	f04f 0400 	mov.w	r4, #0
 8004df2:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004df6:	f144 0100 	adc.w	r1, r4, #0
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f04f 0400 	mov.w	r4, #0
 8004e02:	461a      	mov	r2, r3
 8004e04:	4623      	mov	r3, r4
 8004e06:	f7fb fdd5 	bl	80009b4 <__aeabi_uldivmod>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	460c      	mov	r4, r1
 8004e0e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004e10:	e002      	b.n	8004e18 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	76fb      	strb	r3, [r7, #27]
            break;
 8004e16:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e1e:	d308      	bcc.n	8004e32 <UART_SetConfig+0x4ca>
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e26:	d204      	bcs.n	8004e32 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	69fa      	ldr	r2, [r7, #28]
 8004e2e:	60da      	str	r2, [r3, #12]
 8004e30:	e100      	b.n	8005034 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	76fb      	strb	r3, [r7, #27]
 8004e36:	e0fd      	b.n	8005034 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e40:	f040 8084 	bne.w	8004f4c <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8004e44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d85f      	bhi.n	8004f0c <UART_SetConfig+0x5a4>
 8004e4c:	a201      	add	r2, pc, #4	; (adr r2, 8004e54 <UART_SetConfig+0x4ec>)
 8004e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e52:	bf00      	nop
 8004e54:	08004e79 	.word	0x08004e79
 8004e58:	08004e99 	.word	0x08004e99
 8004e5c:	08004eb9 	.word	0x08004eb9
 8004e60:	08004f0d 	.word	0x08004f0d
 8004e64:	08004ed5 	.word	0x08004ed5
 8004e68:	08004f0d 	.word	0x08004f0d
 8004e6c:	08004f0d 	.word	0x08004f0d
 8004e70:	08004f0d 	.word	0x08004f0d
 8004e74:	08004ef5 	.word	0x08004ef5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e78:	f7fe fa32 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 8004e7c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	005a      	lsls	r2, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	085b      	lsrs	r3, r3, #1
 8004e88:	441a      	add	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e96:	e03c      	b.n	8004f12 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e98:	f7fe fa38 	bl	800330c <HAL_RCC_GetPCLK2Freq>
 8004e9c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	005a      	lsls	r2, r3, #1
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	085b      	lsrs	r3, r3, #1
 8004ea8:	441a      	add	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004eb6:	e02c      	b.n	8004f12 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	085b      	lsrs	r3, r3, #1
 8004ebe:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004ec2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6852      	ldr	r2, [r2, #4]
 8004eca:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ed2:	e01e      	b.n	8004f12 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ed4:	f7fe f96e 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8004ed8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	005a      	lsls	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	085b      	lsrs	r3, r3, #1
 8004ee4:	441a      	add	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ef2:	e00e      	b.n	8004f12 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	085b      	lsrs	r3, r3, #1
 8004efa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f0a:	e002      	b.n	8004f12 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	76fb      	strb	r3, [r7, #27]
        break;
 8004f10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	2b0f      	cmp	r3, #15
 8004f16:	d916      	bls.n	8004f46 <UART_SetConfig+0x5de>
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1e:	d212      	bcs.n	8004f46 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f023 030f 	bic.w	r3, r3, #15
 8004f28:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	085b      	lsrs	r3, r3, #1
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	89fb      	ldrh	r3, [r7, #14]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	89fa      	ldrh	r2, [r7, #14]
 8004f42:	60da      	str	r2, [r3, #12]
 8004f44:	e076      	b.n	8005034 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	76fb      	strb	r3, [r7, #27]
 8004f4a:	e073      	b.n	8005034 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8004f4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d85c      	bhi.n	800500e <UART_SetConfig+0x6a6>
 8004f54:	a201      	add	r2, pc, #4	; (adr r2, 8004f5c <UART_SetConfig+0x5f4>)
 8004f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5a:	bf00      	nop
 8004f5c:	08004f81 	.word	0x08004f81
 8004f60:	08004f9f 	.word	0x08004f9f
 8004f64:	08004fbd 	.word	0x08004fbd
 8004f68:	0800500f 	.word	0x0800500f
 8004f6c:	08004fd9 	.word	0x08004fd9
 8004f70:	0800500f 	.word	0x0800500f
 8004f74:	0800500f 	.word	0x0800500f
 8004f78:	0800500f 	.word	0x0800500f
 8004f7c:	08004ff7 	.word	0x08004ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f80:	f7fe f9ae 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 8004f84:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	085a      	lsrs	r2, r3, #1
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	441a      	add	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f9c:	e03a      	b.n	8005014 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f9e:	f7fe f9b5 	bl	800330c <HAL_RCC_GetPCLK2Freq>
 8004fa2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	085a      	lsrs	r2, r3, #1
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	441a      	add	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004fba:	e02b      	b.n	8005014 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	085b      	lsrs	r3, r3, #1
 8004fc2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004fc6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6852      	ldr	r2, [r2, #4]
 8004fce:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004fd6:	e01d      	b.n	8005014 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fd8:	f7fe f8ec 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8004fdc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	085a      	lsrs	r2, r3, #1
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	441a      	add	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ff4:	e00e      	b.n	8005014 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	085b      	lsrs	r3, r3, #1
 8004ffc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	fbb2 f3f3 	udiv	r3, r2, r3
 8005008:	b29b      	uxth	r3, r3
 800500a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800500c:	e002      	b.n	8005014 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	76fb      	strb	r3, [r7, #27]
        break;
 8005012:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	2b0f      	cmp	r3, #15
 8005018:	d90a      	bls.n	8005030 <UART_SetConfig+0x6c8>
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005020:	d206      	bcs.n	8005030 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69fa      	ldr	r2, [r7, #28]
 8005028:	60da      	str	r2, [r3, #12]
 800502a:	e003      	b.n	8005034 <UART_SetConfig+0x6cc>
 800502c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005040:	7efb      	ldrb	r3, [r7, #27]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3728      	adds	r7, #40	; 0x28
 8005046:	46bd      	mov	sp, r7
 8005048:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800504c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	f003 0308 	and.w	r3, r3, #8
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01a      	beq.n	8005162 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800514a:	d10a      	bne.n	8005162 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	605a      	str	r2, [r3, #4]
  }
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af02      	add	r7, sp, #8
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800519e:	f7fc faaf 	bl	8001700 <HAL_GetTick>
 80051a2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0308 	and.w	r3, r3, #8
 80051ae:	2b08      	cmp	r3, #8
 80051b0:	d10e      	bne.n	80051d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f82a 	bl	800521a <UART_WaitOnFlagUntilTimeout>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e020      	b.n	8005212 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0304 	and.w	r3, r3, #4
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d10e      	bne.n	80051fc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f814 	bl	800521a <UART_WaitOnFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e00a      	b.n	8005212 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2220      	movs	r2, #32
 8005200:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2220      	movs	r2, #32
 8005206:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	af00      	add	r7, sp, #0
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	603b      	str	r3, [r7, #0]
 8005226:	4613      	mov	r3, r2
 8005228:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800522a:	e05d      	b.n	80052e8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005232:	d059      	beq.n	80052e8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005234:	f7fc fa64 	bl	8001700 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	429a      	cmp	r2, r3
 8005242:	d302      	bcc.n	800524a <UART_WaitOnFlagUntilTimeout+0x30>
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d11b      	bne.n	8005282 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005258:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0201 	bic.w	r2, r2, #1
 8005268:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2220      	movs	r2, #32
 8005274:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e042      	b.n	8005308 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d02b      	beq.n	80052e8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800529a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800529e:	d123      	bne.n	80052e8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052a8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052b8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0201 	bic.w	r2, r2, #1
 80052c8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2220      	movs	r2, #32
 80052ce:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2220      	movs	r2, #32
 80052d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2220      	movs	r2, #32
 80052da:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e00f      	b.n	8005308 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	69da      	ldr	r2, [r3, #28]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	4013      	ands	r3, r2
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	bf0c      	ite	eq
 80052f8:	2301      	moveq	r3, #1
 80052fa:	2300      	movne	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	461a      	mov	r2, r3
 8005300:	79fb      	ldrb	r3, [r7, #7]
 8005302:	429a      	cmp	r2, r3
 8005304:	d092      	beq.n	800522c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <__libc_init_array>:
 8005310:	b570      	push	{r4, r5, r6, lr}
 8005312:	4e0d      	ldr	r6, [pc, #52]	; (8005348 <__libc_init_array+0x38>)
 8005314:	4c0d      	ldr	r4, [pc, #52]	; (800534c <__libc_init_array+0x3c>)
 8005316:	1ba4      	subs	r4, r4, r6
 8005318:	10a4      	asrs	r4, r4, #2
 800531a:	2500      	movs	r5, #0
 800531c:	42a5      	cmp	r5, r4
 800531e:	d109      	bne.n	8005334 <__libc_init_array+0x24>
 8005320:	4e0b      	ldr	r6, [pc, #44]	; (8005350 <__libc_init_array+0x40>)
 8005322:	4c0c      	ldr	r4, [pc, #48]	; (8005354 <__libc_init_array+0x44>)
 8005324:	f000 f820 	bl	8005368 <_init>
 8005328:	1ba4      	subs	r4, r4, r6
 800532a:	10a4      	asrs	r4, r4, #2
 800532c:	2500      	movs	r5, #0
 800532e:	42a5      	cmp	r5, r4
 8005330:	d105      	bne.n	800533e <__libc_init_array+0x2e>
 8005332:	bd70      	pop	{r4, r5, r6, pc}
 8005334:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005338:	4798      	blx	r3
 800533a:	3501      	adds	r5, #1
 800533c:	e7ee      	b.n	800531c <__libc_init_array+0xc>
 800533e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005342:	4798      	blx	r3
 8005344:	3501      	adds	r5, #1
 8005346:	e7f2      	b.n	800532e <__libc_init_array+0x1e>
 8005348:	080053d0 	.word	0x080053d0
 800534c:	080053d0 	.word	0x080053d0
 8005350:	080053d0 	.word	0x080053d0
 8005354:	080053d4 	.word	0x080053d4

08005358 <memset>:
 8005358:	4402      	add	r2, r0
 800535a:	4603      	mov	r3, r0
 800535c:	4293      	cmp	r3, r2
 800535e:	d100      	bne.n	8005362 <memset+0xa>
 8005360:	4770      	bx	lr
 8005362:	f803 1b01 	strb.w	r1, [r3], #1
 8005366:	e7f9      	b.n	800535c <memset+0x4>

08005368 <_init>:
 8005368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536a:	bf00      	nop
 800536c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536e:	bc08      	pop	{r3}
 8005370:	469e      	mov	lr, r3
 8005372:	4770      	bx	lr

08005374 <_fini>:
 8005374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005376:	bf00      	nop
 8005378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800537a:	bc08      	pop	{r3}
 800537c:	469e      	mov	lr, r3
 800537e:	4770      	bx	lr
